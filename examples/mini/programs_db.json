{
  "programs": {
    "assignment.py": {
      "timestamp": "",
      "source": "a = b",
      "labels": {
        "assignment": [[1,1]],
        "assignment_lhs_identifier:a": [[1,1]],
        "assignment_rhs_atom:b": [[1,1]],
        "flat_style": [[1,1]],
        "global_scope:a": [[1,1]],
        "imperative_style": [[1,1]],
        "loaded_variable:b": [[1,1]],
        "node:Assign": [[1,1]],
        "node:Name": [[1,1],[1,1]],
        "one_liner_style": [[1,1]],
        "scope:a": [[1,1]],
        "single_assignment:a": [[1,1]],
        "variety:1": [[1,1]],
        "whole_span:1": [[1,1]]
      },
      "taxa": {
        "meta/count/program/sloc/1": [[1,1]],
        "meta/count/variety/1": [[1,1]],
        "meta/program": [[1,1]],
        "style/imperative/flat": [[1,1]],
        "style/one_liner": [[1,1]],
        "var/assignment/explicit/single": [[1,1]],
        "var/scope/global": [[1,1]]
      }
    },
    "collatz.py": {
      "timestamp": "",
      "source": "def print_collatz(n):\n    while n != 1:\n        print(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    print(n)",
      "labels": {
        "added_block_label": [[1,8]],
        "added_label_on_line_4": [[4,4]],
        "addition_operator": [[7,7]],
        "argument:n": [[3,3],[8,8]],
        "assignment:Add": [[7,7]],
        "assignment:FloorDiv": [[5,5]],
        "assignment_lhs_identifier:n": [[5,5],[7,7]],
        "assignment_rhs_atom:1": [[7,7]],
        "assignment_rhs_atom:2": [[5,5]],
        "assignment_rhs_atom:3": [[7,7]],
        "assignment_rhs_atom:n": [[5,5],[7,7]],
        "augmented_assignment_unpythonic": [[5,5]],
        "binary_operator:Add": [[7,7]],
        "binary_operator:Mod": [[4,4]],
        "binary_operator:Mult": [[7,7]],
        "comparison_operator:Eq": [[4,4]],
        "comparison_operator:NotEq": [[2,2]],
        "divisibility_test:2": [[4,4]],
        "external_free_call:print": [[3,3],[8,8]],
        "free_call:print": [[3,3],[8,8]],
        "free_call_without_result:print": [[3,3],[8,8]],
        "function:print_collatz": [[1,8]],
        "function_line_count:8": [[1,8]],
        "function_parameter:n": [[1,1]],
        "function_parameter_flavor:arg": [[1,1]],
        "function_returning_nothing:print_collatz": [[1,8]],
        "if": [[4,7]],
        "if_else_branch": [[7,7]],
        "if_test_atom:0": [[4,4]],
        "if_test_atom:2": [[4,4]],
        "if_test_atom:n": [[4,4]],
        "if_then_branch": [[5,5]],
        "literal:0": [[4,4]],
        "literal:1": [[2,2],[7,7]],
        "literal:2": [[4,4],[5,5]],
        "literal:3": [[7,7]],
        "loaded_variable:n": [[2,2],[3,3],[4,4],[5,5],[7,7],[8,8]],
        "local_scope:n": [[1,8]],
        "loop:while": [[2,7]],
        "loop_with_late_exit:while": [[2,7]],
        "magic_number:3": [[7,7]],
        "modulo_operator": [[4,4]],
        "multiplication_operator": [[7,7]],
        "node:Assign": [[5,5],[7,7]],
        "node:BinOp": [[4,4],[5,5],[7,7],[7,7]],
        "node:Call": [[3,3],[8,8]],
        "node:Compare": [[2,2],[4,4]],
        "node:Expr": [[3,3],[8,8]],
        "node:FunctionDef": [[1,8]],
        "node:If": [[4,7]],
        "node:Name": [[2,2],[3,3],[3,3],[4,4],[5,5],[5,5],[7,7],[7,7],[8,8],[8,8]],
        "node:Num": [[2,2],[4,4],[4,4],[5,5],[7,7],[7,7]],
        "node:While": [[2,7]],
        "node:arg": [[1,1]],
        "procedural_style": [[1,8]],
        "scope:n": [[1,8]],
        "single_assignment:n": [[5,5],[7,7]],
        "suggest_constant_definition": [[2,2]],
        "unknown_label": [[6,6]],
        "update:n:1": [[7,7]],
        "update:n:2": [[5,5]],
        "update:n:3": [[7,7]],
        "update_by_assignment:n:1": [[7,7]],
        "update_by_assignment:n:2": [[5,5]],
        "update_by_assignment:n:3": [[7,7]],
        "update_by_assignment_with:Add": [[7,7]],
        "update_by_assignment_with:FloorDiv": [[5,5]],
        "update_with:Add": [[7,7]],
        "update_with:FloorDiv": [[5,5]],
        "variety:4": [[1,8]],
        "verbose_conditional_assignment": [[4,7]],
        "whole_span:8": [[1,8]]
      },
      "taxa": {
        "call/subroutine/builtin/print": [[3,3],[8,8]],
        "condition/divisibility/parity": [[4,4]],
        "condition/equality": [[4,4]],
        "condition/equality/not": [[2,2]],
        "def/subroutine/procedure": [[1,8]],
        "flow/conditional": [[4,7]],
        "flow/conditional/else": [[7,7]],
        "flow/loop/exit/late": [[2,7]],
        "flow/loop/while": [[2,7]],
        "meta/count/program/sloc/8": [[1,8]],
        "meta/count/subroutine/sloc/8": [[1,8]],
        "meta/count/variety/4": [[1,8]],
        "meta/program": [[1,8]],
        "operator/arithmetic/addition": [[7,7]],
        "operator/arithmetic/modulo": [[4,4]],
        "operator/arithmetic/multiplication": [[7,7]],
        "style/procedural": [[1,8]],
        "style/unpythonic/augmented_assignment": [[5,5]],
        "type/number/integer/literal": [[2,2],[4,4],[5,5],[7,7],[7,7]],
        "type/number/integer/literal/zero": [[4,4]],
        "type/number/magic": [[7,7]],
        "var/assignment/explicit/conditional/verbose": [[4,7]],
        "var/assignment/explicit/single": [[5,5],[7,7]],
        "var/assignment/implicit/parameter": [[1,1]],
        "var/scope/local": [[1,8]]
      }
    },
    "fizzbuzz.py": {
      "timestamp": "",
      "source": "import collatz\nfor i in range(1, 101):\n    if i % 15 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)",
      "labels": {
        "argument:": [[4,4],[6,6],[8,8]],
        "argument:1": [[2,2]],
        "argument:101": [[2,2]],
        "argument:i": [[10,10]],
        "binary_operator:Mod": [[3,3],[5,5],[7,7]],
        "comparison_operator:Eq": [[3,3],[5,5],[7,7]],
        "divisibility_test:15": [[3,3]],
        "divisibility_test:3": [[5,5]],
        "divisibility_test:5": [[7,7]],
        "external_free_call:print": [[4,4],[6,6],[8,8],[10,10]],
        "external_free_call:range": [[2,2]],
        "for:i": [[2,10]],
        "for_range:1:101": [[2,10]],
        "free_call:print": [[4,4],[6,6],[8,8],[10,10]],
        "free_call:range": [[2,2]],
        "free_call_without_result:print": [[4,4],[6,6],[8,8],[10,10]],
        "global_scope:i": [[1,10]],
        "if": [[3,10],[5,10],[7,10]],
        "if_elif_branch": [[6,6],[8,8]],
        "if_else_branch": [[10,10]],
        "if_test_atom:0": [[3,3],[5,5],[7,7]],
        "if_test_atom:15": [[3,3]],
        "if_test_atom:3": [[5,5]],
        "if_test_atom:5": [[7,7]],
        "if_test_atom:i": [[3,3],[5,5],[7,7]],
        "if_then_branch": [[4,4]],
        "imperative_style": [[1,10]],
        "import_internally:collatz": [[1,1]],
        "import_module_internally:collatz": [[1,1]],
        "iteration_variable:i": [[2,2]],
        "literal:0": [[3,3],[5,5],[7,7]],
        "literal:1": [[2,2]],
        "literal:101": [[2,2]],
        "literal:15": [[3,3]],
        "literal:3": [[5,5]],
        "literal:5": [[7,7]],
        "literal:Str": [[4,4],[6,6],[8,8]],
        "loaded_variable:i": [[3,3],[5,5],[7,7],[10,10]],
        "loop:for": [[2,10]],
        "loop_with_late_exit:for": [[2,10]],
        "magic_number:101": [[2,2]],
        "magic_number:15": [[3,3]],
        "magic_number:3": [[5,5]],
        "magic_number:5": [[7,7]],
        "modulo_operator": [[3,3],[5,5],[7,7]],
        "node:BinOp": [[3,3],[5,5],[7,7]],
        "node:Call": [[2,2],[4,4],[6,6],[8,8],[10,10]],
        "node:Compare": [[3,3],[5,5],[7,7]],
        "node:Expr": [[4,4],[6,6],[8,8],[10,10]],
        "node:For": [[2,10]],
        "node:If": [[3,10],[5,10],[7,10]],
        "node:Import": [[1,1]],
        "node:Name": [[2,2],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[10,10],[10,10]],
        "node:Num": [[2,2],[2,2],[3,3],[3,3],[5,5],[5,5],[7,7],[7,7]],
        "node:Str": [[4,4],[6,6],[8,8]],
        "range:1:101": [[2,2]],
        "scope:i": [[1,10]],
        "variety:3": [[1,10]],
        "whole_span:10": [[1,10]]
      },
      "taxa": {
        "call/subroutine/builtin/print": [[4,4],[6,6],[8,8],[10,10]],
        "call/subroutine/builtin/range": [[2,2]],
        "condition/equality": [[3,3],[5,5],[7,7]],
        "flow/conditional": [[3,10],[5,10],[7,10]],
        "flow/conditional/else": [[10,10]],
        "flow/conditional/else/if": [[6,6],[8,8]],
        "flow/loop/exit/late": [[2,10]],
        "flow/loop/for/arithmetic/start": [[2,10]],
        "import/personal": [[1,1]],
        "meta/count/program/sloc/10": [[1,10]],
        "meta/count/variety/3": [[1,10]],
        "meta/program": [[1,10]],
        "operator/arithmetic/modulo": [[3,3],[5,5],[7,7]],
        "style/imperative": [[1,10]],
        "type/number/integer/literal": [[2,2],[2,2],[3,3],[5,5],[7,7]],
        "type/number/integer/literal/zero": [[3,3],[5,5],[7,7]],
        "type/number/magic": [[2,2],[3,3],[5,5],[7,7]],
        "type/sequence/string/literal": [[4,4],[6,6],[8,8]],
        "var/assignment/implicit/iteration_variable": [[2,2]],
        "var/scope/global": [[1,10]]
      }
    },
    "is_even.py": {
      "timestamp": "",
      "source": "import fizzbuzz\ndef is_even(n):\n    return n % 2 == 0",
      "labels": {
        "binary_operator:Mod": [[3,3]],
        "comparison_operator:Eq": [[3,3]],
        "divisibility_test:2": [[3,3]],
        "function:is_even": [[2,3]],
        "function_line_count:2": [[2,3]],
        "function_parameter:n": [[2,2]],
        "function_parameter_flavor:arg": [[2,2]],
        "function_returning_something:is_even": [[2,3]],
        "functional_style": [[1,3]],
        "import_internally:fizzbuzz": [[1,1]],
        "import_module_internally:fizzbuzz": [[1,1]],
        "literal:0": [[3,3]],
        "literal:2": [[3,3]],
        "loaded_variable:n": [[3,3]],
        "local_scope:n": [[2,3]],
        "modulo_operator": [[3,3]],
        "node:BinOp": [[3,3]],
        "node:Compare": [[3,3]],
        "node:FunctionDef": [[2,3]],
        "node:Import": [[1,1]],
        "node:Name": [[3,3]],
        "node:Num": [[3,3],[3,3]],
        "node:Return": [[3,3]],
        "node:arg": [[2,2]],
        "one_liner_style": [[1,3]],
        "pure_function:is_even": [[2,3]],
        "return": [[3,3]],
        "scope:n": [[2,3]],
        "variety:2": [[1,3]],
        "whole_span:3": [[1,3]]
      },
      "taxa": {
        "condition/divisibility/parity": [[3,3]],
        "condition/equality": [[3,3]],
        "def/subroutine/function/predicate": [[2,3]],
        "def/subroutine/function/pure": [[2,3]],
        "def/subroutine/return/something": [[3,3]],
        "import/personal": [[1,1]],
        "meta/count/program/sloc/3": [[1,3]],
        "meta/count/subroutine/sloc/2": [[2,3]],
        "meta/count/variety/2": [[1,3]],
        "meta/program": [[1,3]],
        "operator/arithmetic/modulo": [[3,3]],
        "style/functional": [[1,3]],
        "style/functional_trait/pure_function": [[2,3]],
        "style/one_liner": [[1,3]],
        "type/number/integer/literal": [[3,3]],
        "type/number/integer/literal/zero": [[3,3]],
        "var/assignment/implicit/parameter": [[2,2]],
        "var/scope/local": [[2,3]]
      }
    }
  },
  "labels": {
    "added_block_label": [
      "collatz.py"
    ],
    "added_label_on_line_4": [
      "collatz.py"
    ],
    "addition_operator": [
      "collatz.py"
    ],
    "argument:": [
      "fizzbuzz.py"
    ],
    "argument:1": [
      "fizzbuzz.py"
    ],
    "argument:101": [
      "fizzbuzz.py"
    ],
    "argument:i": [
      "fizzbuzz.py"
    ],
    "argument:n": [
      "collatz.py"
    ],
    "assignment": [
      "assignment.py"
    ],
    "assignment:Add": [
      "collatz.py"
    ],
    "assignment:FloorDiv": [
      "collatz.py"
    ],
    "assignment_lhs_identifier:a": [
      "assignment.py"
    ],
    "assignment_lhs_identifier:n": [
      "collatz.py"
    ],
    "assignment_rhs_atom:1": [
      "collatz.py"
    ],
    "assignment_rhs_atom:2": [
      "collatz.py"
    ],
    "assignment_rhs_atom:3": [
      "collatz.py"
    ],
    "assignment_rhs_atom:b": [
      "assignment.py"
    ],
    "assignment_rhs_atom:n": [
      "collatz.py"
    ],
    "augmented_assignment_unpythonic": [
      "collatz.py"
    ],
    "binary_operator:Add": [
      "collatz.py"
    ],
    "binary_operator:Mod": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "binary_operator:Mult": [
      "collatz.py"
    ],
    "comparison_operator:Eq": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "comparison_operator:NotEq": [
      "collatz.py"
    ],
    "divisibility_test:15": [
      "fizzbuzz.py"
    ],
    "divisibility_test:2": [
      "collatz.py",
      "is_even.py"
    ],
    "divisibility_test:3": [
      "fizzbuzz.py"
    ],
    "divisibility_test:5": [
      "fizzbuzz.py"
    ],
    "external_free_call:print": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "external_free_call:range": [
      "fizzbuzz.py"
    ],
    "flat_style": [
      "assignment.py"
    ],
    "for:i": [
      "fizzbuzz.py"
    ],
    "for_range:1:101": [
      "fizzbuzz.py"
    ],
    "free_call:print": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "free_call:range": [
      "fizzbuzz.py"
    ],
    "free_call_without_result:print": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "function:is_even": [
      "is_even.py"
    ],
    "function:print_collatz": [
      "collatz.py"
    ],
    "function_line_count:2": [
      "is_even.py"
    ],
    "function_line_count:8": [
      "collatz.py"
    ],
    "function_parameter:n": [
      "collatz.py",
      "is_even.py"
    ],
    "function_parameter_flavor:arg": [
      "collatz.py",
      "is_even.py"
    ],
    "function_returning_nothing:print_collatz": [
      "collatz.py"
    ],
    "function_returning_something:is_even": [
      "is_even.py"
    ],
    "functional_style": [
      "is_even.py"
    ],
    "global_scope:a": [
      "assignment.py"
    ],
    "global_scope:i": [
      "fizzbuzz.py"
    ],
    "if": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "if_elif_branch": [
      "fizzbuzz.py"
    ],
    "if_else_branch": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "if_test_atom:0": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "if_test_atom:15": [
      "fizzbuzz.py"
    ],
    "if_test_atom:2": [
      "collatz.py"
    ],
    "if_test_atom:3": [
      "fizzbuzz.py"
    ],
    "if_test_atom:5": [
      "fizzbuzz.py"
    ],
    "if_test_atom:i": [
      "fizzbuzz.py"
    ],
    "if_test_atom:n": [
      "collatz.py"
    ],
    "if_then_branch": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "imperative_style": [
      "assignment.py",
      "fizzbuzz.py"
    ],
    "import_internally:collatz": [
      "fizzbuzz.py"
    ],
    "import_internally:fizzbuzz": [
      "is_even.py"
    ],
    "import_module_internally:collatz": [
      "fizzbuzz.py"
    ],
    "import_module_internally:fizzbuzz": [
      "is_even.py"
    ],
    "iteration_variable:i": [
      "fizzbuzz.py"
    ],
    "literal:0": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "literal:1": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "literal:101": [
      "fizzbuzz.py"
    ],
    "literal:15": [
      "fizzbuzz.py"
    ],
    "literal:2": [
      "collatz.py",
      "is_even.py"
    ],
    "literal:3": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "literal:5": [
      "fizzbuzz.py"
    ],
    "literal:Str": [
      "fizzbuzz.py"
    ],
    "loaded_variable:b": [
      "assignment.py"
    ],
    "loaded_variable:i": [
      "fizzbuzz.py"
    ],
    "loaded_variable:n": [
      "collatz.py",
      "is_even.py"
    ],
    "local_scope:n": [
      "collatz.py",
      "is_even.py"
    ],
    "loop:for": [
      "fizzbuzz.py"
    ],
    "loop:while": [
      "collatz.py"
    ],
    "loop_with_late_exit:for": [
      "fizzbuzz.py"
    ],
    "loop_with_late_exit:while": [
      "collatz.py"
    ],
    "magic_number:101": [
      "fizzbuzz.py"
    ],
    "magic_number:15": [
      "fizzbuzz.py"
    ],
    "magic_number:3": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "magic_number:5": [
      "fizzbuzz.py"
    ],
    "modulo_operator": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "multiplication_operator": [
      "collatz.py"
    ],
    "node:Assign": [
      "assignment.py",
      "collatz.py"
    ],
    "node:BinOp": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "node:Call": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "node:Compare": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "node:Expr": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "node:For": [
      "fizzbuzz.py"
    ],
    "node:FunctionDef": [
      "collatz.py",
      "is_even.py"
    ],
    "node:If": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "node:Import": [
      "fizzbuzz.py",
      "is_even.py"
    ],
    "node:Name": [
      "assignment.py",
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "node:Num": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "node:Return": [
      "is_even.py"
    ],
    "node:Str": [
      "fizzbuzz.py"
    ],
    "node:While": [
      "collatz.py"
    ],
    "node:arg": [
      "collatz.py",
      "is_even.py"
    ],
    "one_liner_style": [
      "assignment.py",
      "is_even.py"
    ],
    "procedural_style": [
      "collatz.py"
    ],
    "pure_function:is_even": [
      "is_even.py"
    ],
    "range:1:101": [
      "fizzbuzz.py"
    ],
    "return": [
      "is_even.py"
    ],
    "scope:a": [
      "assignment.py"
    ],
    "scope:i": [
      "fizzbuzz.py"
    ],
    "scope:n": [
      "collatz.py",
      "is_even.py"
    ],
    "single_assignment:a": [
      "assignment.py"
    ],
    "single_assignment:n": [
      "collatz.py"
    ],
    "suggest_constant_definition": [
      "collatz.py"
    ],
    "unknown_label": [
      "collatz.py"
    ],
    "update:n:1": [
      "collatz.py"
    ],
    "update:n:2": [
      "collatz.py"
    ],
    "update:n:3": [
      "collatz.py"
    ],
    "update_by_assignment:n:1": [
      "collatz.py"
    ],
    "update_by_assignment:n:2": [
      "collatz.py"
    ],
    "update_by_assignment:n:3": [
      "collatz.py"
    ],
    "update_by_assignment_with:Add": [
      "collatz.py"
    ],
    "update_by_assignment_with:FloorDiv": [
      "collatz.py"
    ],
    "update_with:Add": [
      "collatz.py"
    ],
    "update_with:FloorDiv": [
      "collatz.py"
    ],
    "variety:1": [
      "assignment.py"
    ],
    "variety:2": [
      "is_even.py"
    ],
    "variety:3": [
      "fizzbuzz.py"
    ],
    "variety:4": [
      "collatz.py"
    ],
    "verbose_conditional_assignment": [
      "collatz.py"
    ],
    "whole_span:1": [
      "assignment.py"
    ],
    "whole_span:10": [
      "fizzbuzz.py"
    ],
    "whole_span:3": [
      "is_even.py"
    ],
    "whole_span:8": [
      "collatz.py"
    ]
  },
  "taxa": {
    "call/subroutine/builtin/print": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "call/subroutine/builtin/range": [
      "fizzbuzz.py"
    ],
    "condition/divisibility/parity": [
      "collatz.py",
      "is_even.py"
    ],
    "condition/equality": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "condition/equality/not": [
      "collatz.py"
    ],
    "def/subroutine/function/predicate": [
      "is_even.py"
    ],
    "def/subroutine/function/pure": [
      "is_even.py"
    ],
    "def/subroutine/procedure": [
      "collatz.py"
    ],
    "def/subroutine/return/something": [
      "is_even.py"
    ],
    "flow/conditional": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "flow/conditional/else": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "flow/conditional/else/if": [
      "fizzbuzz.py"
    ],
    "flow/loop/exit/late": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "flow/loop/for/arithmetic/start": [
      "fizzbuzz.py"
    ],
    "flow/loop/while": [
      "collatz.py"
    ],
    "import/personal": [
      "fizzbuzz.py",
      "is_even.py"
    ],
    "meta/count/program/sloc/1": [
      "assignment.py"
    ],
    "meta/count/program/sloc/10": [
      "fizzbuzz.py"
    ],
    "meta/count/program/sloc/3": [
      "is_even.py"
    ],
    "meta/count/program/sloc/8": [
      "collatz.py"
    ],
    "meta/count/subroutine/sloc/2": [
      "is_even.py"
    ],
    "meta/count/subroutine/sloc/8": [
      "collatz.py"
    ],
    "meta/count/variety/1": [
      "assignment.py"
    ],
    "meta/count/variety/2": [
      "is_even.py"
    ],
    "meta/count/variety/3": [
      "fizzbuzz.py"
    ],
    "meta/count/variety/4": [
      "collatz.py"
    ],
    "meta/program": [
      "assignment.py",
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "operator/arithmetic/addition": [
      "collatz.py"
    ],
    "operator/arithmetic/modulo": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "operator/arithmetic/multiplication": [
      "collatz.py"
    ],
    "style/functional": [
      "is_even.py"
    ],
    "style/functional_trait/pure_function": [
      "is_even.py"
    ],
    "style/imperative": [
      "fizzbuzz.py"
    ],
    "style/imperative/flat": [
      "assignment.py"
    ],
    "style/one_liner": [
      "assignment.py",
      "is_even.py"
    ],
    "style/procedural": [
      "collatz.py"
    ],
    "style/unpythonic/augmented_assignment": [
      "collatz.py"
    ],
    "type/number/integer/literal": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "type/number/integer/literal/zero": [
      "collatz.py",
      "fizzbuzz.py",
      "is_even.py"
    ],
    "type/number/magic": [
      "collatz.py",
      "fizzbuzz.py"
    ],
    "type/sequence/string/literal": [
      "fizzbuzz.py"
    ],
    "var/assignment/explicit/conditional/verbose": [
      "collatz.py"
    ],
    "var/assignment/explicit/single": [
      "assignment.py",
      "collatz.py"
    ],
    "var/assignment/implicit/iteration_variable": [
      "fizzbuzz.py"
    ],
    "var/assignment/implicit/parameter": [
      "collatz.py",
      "is_even.py"
    ],
    "var/scope/global": [
      "assignment.py",
      "fizzbuzz.py"
    ],
    "var/scope/local": [
      "collatz.py",
      "is_even.py"
    ]
  },
  "importations": {
    "assignment.py": [],
    "collatz.py": [],
    "fizzbuzz.py": [
      "collatz.py"
    ],
    "is_even.py": [
      "collatz.py",
      "fizzbuzz.py"
    ]
  },
  "exportations": {
    "assignment.py": [],
    "collatz.py": [
      "fizzbuzz.py",
      "is_even.py"
    ],
    "fizzbuzz.py": [
      "is_even.py"
    ],
    "is_even.py": []
  }
}

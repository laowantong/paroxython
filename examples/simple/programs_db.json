{
  "programs": {
    "01_hello_world.py": {
      "timestamp": "",
      "source": "print(\"Hello, world!\")",
      "labels": {
        "argument:": [[1,1]],
        "external_free_call:print": [[1,1]],
        "flat_style": [[1,1]],
        "free_call:print": [[1,1]],
        "free_call_without_result:print": [[1,1]],
        "imperative_style": [[1,1]],
        "literal:Str": [[1,1]],
        "node:Call": [[1,1]],
        "node:Expr": [[1,1]],
        "node:Name": [[1,1]],
        "node:Str": [[1,1]],
        "one_liner_style": [[1,1]],
        "variety:1": [[1,1]],
        "whole_span:1": [[1,1]]
      },
      "taxa": {
        "call/subroutine/builtin/print": [[1,1]],
        "meta/count/program/sloc/1": [[1,1]],
        "meta/count/variety/1": [[1,1]],
        "meta/program": [[1,1]],
        "style/imperative/flat": [[1,1]],
        "style/one_liner": [[1,1]],
        "type/sequence/string/literal": [[1,1]]
      }
    },
    "02_input_name.py": {
      "timestamp": "",
      "source": "name = input(\"What is your name?\\n\")\nprint(\"Hi, %s.\" % name)",
      "labels": {
        "argument:": [[1,1],[2,2]],
        "assignment:input": [[1,1]],
        "assignment_lhs_identifier:name": [[1,1]],
        "binary_operator:Mod": [[2,2]],
        "external_free_call:input": [[1,1]],
        "external_free_call:print": [[2,2]],
        "flat_style": [[1,2]],
        "free_call:input": [[1,1]],
        "free_call:print": [[2,2]],
        "free_call_without_result:print": [[2,2]],
        "global_scope:name": [[1,2]],
        "imperative_style": [[1,2]],
        "literal:Str": [[1,1],[2,2]],
        "loaded_variable:name": [[2,2]],
        "node:Assign": [[1,1]],
        "node:BinOp": [[2,2]],
        "node:Call": [[1,1],[2,2]],
        "node:Expr": [[2,2]],
        "node:Name": [[1,1],[1,1],[2,2],[2,2]],
        "node:Str": [[1,1],[2,2]],
        "scope:name": [[1,2]],
        "single_assignment:name": [[1,1]],
        "special_literal_string:What is your name?\\n": [[1,1]],
        "string_formatting_operator": [[2,2]],
        "variety:1": [[1,2]],
        "whole_span:2": [[1,2]]
      },
      "taxa": {
        "call/subroutine/builtin/input": [[1,1]],
        "call/subroutine/builtin/print": [[2,2]],
        "meta/count/program/sloc/2": [[1,2]],
        "meta/count/variety/1": [[1,2]],
        "meta/program": [[1,2]],
        "operator/string/format": [[2,2]],
        "style/imperative/flat": [[1,2]],
        "type/sequence/string/literal": [[2,2]],
        "type/sequence/string/literal/special/\\n": [[1,1]],
        "var/assignment/explicit/single": [[1,1]],
        "var/scope/global": [[1,2]]
      }
    },
    "03_friends.py": {
      "timestamp": "",
      "source": "friends = [\"john\", \"pat\", \"gary\", \"michael\"]\nfor i, name in enumerate(friends):\n    print(\"iteration {iteration} is {name}\".format(iteration=i, name=name))",
      "labels": {
        "argument:": [[3,3]],
        "argument:friends": [[2,2]],
        "argument:i": [[3,3]],
        "argument:name": [[3,3]],
        "assignment": [[1,1]],
        "assignment_lhs_identifier:friends": [[1,1]],
        "composition": [[3,3]],
        "external_free_call:enumerate": [[2,2]],
        "external_free_call:print": [[3,3]],
        "for:i": [[2,3]],
        "for:name": [[2,3]],
        "for_indexes_elements:i": [[2,3]],
        "free_call:enumerate": [[2,2]],
        "free_call:print": [[3,3]],
        "free_call_with_keyword_argument:print:iteration": [[3,3]],
        "free_call_with_keyword_argument:print:name": [[3,3]],
        "free_call_without_result:print": [[3,3]],
        "global_scope:friends": [[1,3]],
        "global_scope:i": [[1,3]],
        "global_scope:name": [[1,3]],
        "imperative_style": [[1,3]],
        "iteration_variable:i": [[2,2]],
        "iteration_variable:name": [[2,2]],
        "keyword_argument:iteration": [[3,3]],
        "keyword_argument:name": [[3,3]],
        "literal:List": [[1,1]],
        "literal:Str": [[1,1],[1,1],[1,1],[1,1],[3,3]],
        "literal:Tuple": [[2,2]],
        "loaded_variable:friends": [[2,2]],
        "loaded_variable:i": [[3,3]],
        "loaded_variable:name": [[3,3]],
        "loop:for": [[2,3]],
        "loop_with_late_exit:for": [[2,3]],
        "member_call_method:format": [[3,3]],
        "node:Assign": [[1,1]],
        "node:Attribute": [[3,3]],
        "node:Call": [[2,2],[3,3],[3,3]],
        "node:Expr": [[3,3]],
        "node:For": [[2,3]],
        "node:List": [[1,1]],
        "node:Name": [[1,1],[2,2],[2,2],[2,2],[2,2],[3,3],[3,3],[3,3]],
        "node:Str": [[1,1],[1,1],[1,1],[1,1],[3,3]],
        "node:Tuple": [[2,2]],
        "scope:friends": [[1,3]],
        "scope:i": [[1,3]],
        "scope:name": [[1,3]],
        "single_assignment:friends": [[1,1]],
        "variety:1": [[1,3]],
        "whole_span:3": [[1,3]]
      },
      "taxa": {
        "call/composition": [[3,3]],
        "call/subroutine/builtin/enumerate": [[2,2]],
        "call/subroutine/builtin/print/iteration": [[3,3]],
        "call/subroutine/builtin/print/name": [[3,3]],
        "call/subroutine/method/sequence/string/format": [[3,3]],
        "flow/loop/exit/late": [[2,3]],
        "flow/loop/for/indexes_and_elements": [[2,3]],
        "meta/count/program/sloc/3": [[1,3]],
        "meta/count/variety/1": [[1,3]],
        "meta/program": [[1,3]],
        "style/imperative": [[1,3]],
        "type/sequence/list/literal": [[1,1]],
        "type/sequence/string": [[3,3]],
        "type/sequence/string/literal": [[1,1],[1,1],[1,1],[1,1],[3,3]],
        "type/sequence/tuple/literal": [[2,2]],
        "var/assignment/explicit/single": [[1,1]],
        "var/assignment/implicit/iteration_variable": [[2,2],[2,2]],
        "var/scope/global": [[1,3]]
      }
    },
    "04_fibonacci.py": {
      "timestamp": "",
      "source": "parents, babies = (1, 1)\nwhile babies < 100:\n    print(\"This generation has {} babies\".format(babies))\n    parents, babies = (babies, parents + babies)",
      "labels": {
        "addition_operator": [[4,4]],
        "argument:": [[3,3]],
        "argument:babies": [[3,3]],
        "assignment": [[1,1],[4,4]],
        "assignment_lhs_identifier:babies": [[1,1],[4,4]],
        "assignment_lhs_identifier:parents": [[1,1],[4,4]],
        "assignment_rhs_atom:1": [[1,1],[1,1]],
        "assignment_rhs_atom:babies": [[4,4],[4,4]],
        "assignment_rhs_atom:parents": [[4,4]],
        "binary_operator:Add": [[4,4]],
        "comparison_operator:Lt": [[2,2]],
        "composition": [[3,3]],
        "external_free_call:print": [[3,3]],
        "free_call:print": [[3,3]],
        "free_call_without_result:print": [[3,3]],
        "global_scope:babies": [[1,4]],
        "global_scope:parents": [[1,4]],
        "imperative_style": [[1,4]],
        "literal:1": [[1,1],[1,1]],
        "literal:100": [[2,2]],
        "literal:Str": [[3,3]],
        "literal:Tuple": [[1,1],[1,1],[4,4],[4,4]],
        "loaded_variable:babies": [[2,2],[3,3],[4,4],[4,4]],
        "loaded_variable:parents": [[4,4]],
        "loop:while": [[2,4]],
        "loop_with_late_exit:while": [[2,4]],
        "magic_number:100": [[2,2]],
        "member_call_method:format": [[3,3]],
        "node:Assign": [[1,1],[4,4]],
        "node:Attribute": [[3,3]],
        "node:BinOp": [[4,4]],
        "node:Call": [[3,3],[3,3]],
        "node:Compare": [[2,2]],
        "node:Expr": [[3,3]],
        "node:Name": [[1,1],[1,1],[2,2],[3,3],[3,3],[4,4],[4,4],[4,4],[4,4],[4,4]],
        "node:Num": [[1,1],[1,1],[2,2]],
        "node:Str": [[3,3]],
        "node:Tuple": [[1,1],[1,1],[4,4],[4,4]],
        "node:While": [[2,4]],
        "parallel_assignment:2": [[1,1],[4,4]],
        "scope:babies": [[1,4]],
        "scope:parents": [[1,4]],
        "slide": [[4,4]],
        "update:babies:parents": [[4,4]],
        "update:parents:babies": [[4,4]],
        "update_by_assignment:babies:parents": [[4,4]],
        "update_by_assignment:parents:babies": [[4,4]],
        "update_by_assignment_with": [[4,4]],
        "update_with": [[4,4]],
        "variety:2": [[1,4]],
        "whole_span:4": [[1,4]]
      },
      "taxa": {
        "call/composition": [[3,3]],
        "call/subroutine/builtin/print": [[3,3]],
        "call/subroutine/method/sequence/string/format": [[3,3]],
        "condition/inequality": [[2,2]],
        "flow/loop/exit/late": [[2,4]],
        "flow/loop/while": [[2,4]],
        "meta/count/program/sloc/4": [[1,4]],
        "meta/count/variety/2": [[1,4]],
        "meta/program": [[1,4]],
        "operator/arithmetic/addition": [[4,4]],
        "style/imperative": [[1,4]],
        "type/number/integer/literal": [[1,1],[1,1],[2,2]],
        "type/number/magic": [[2,2]],
        "type/sequence/string": [[3,3]],
        "type/sequence/string/literal": [[3,3]],
        "type/sequence/tuple/literal": [[1,1],[1,1],[4,4],[4,4]],
        "var/assignment/explicit/parallel": [[1,1]],
        "var/assignment/explicit/parallel/slide": [[4,4]],
        "var/scope/global": [[1,4]]
      }
    },
    "05_greet.py": {
      "timestamp": "",
      "source": "def greet(name):\n    print(\"Hello\", name)\ngreet(\"Jack\")\ngreet(\"Jill\")\ngreet(\"Bob\")",
      "labels": {
        "argument:": [[2,2],[3,3],[4,4],[5,5]],
        "argument:name": [[2,2]],
        "external_free_call:print": [[2,2]],
        "free_call:greet": [[3,3],[4,4],[5,5]],
        "free_call:print": [[2,2]],
        "free_call_without_result:greet": [[3,3],[4,4],[5,5]],
        "free_call_without_result:print": [[2,2]],
        "function:greet": [[1,2]],
        "function_line_count:2": [[1,2]],
        "function_parameter:name": [[1,1]],
        "function_parameter_flavor:arg": [[1,1]],
        "function_returning_nothing:greet": [[1,2]],
        "internal_free_call:greet": [[3,3],[4,4],[5,5]],
        "literal:Str": [[2,2],[3,3],[4,4],[5,5]],
        "loaded_variable:name": [[2,2]],
        "local_scope:name": [[1,2]],
        "node:Call": [[2,2],[3,3],[4,4],[5,5]],
        "node:Expr": [[2,2],[3,3],[4,4],[5,5]],
        "node:FunctionDef": [[1,2]],
        "node:Name": [[2,2],[2,2],[3,3],[4,4],[5,5]],
        "node:Str": [[2,2],[3,3],[4,4],[5,5]],
        "node:arg": [[1,1]],
        "procedural_style": [[1,5]],
        "scope:name": [[1,2]],
        "variety:2": [[1,5]],
        "whole_span:5": [[1,5]]
      },
      "taxa": {
        "call/subroutine": [[3,3],[4,4],[5,5]],
        "call/subroutine/builtin/print": [[2,2]],
        "def/subroutine/parameter/arg": [[1,1]],
        "def/subroutine/procedure": [[1,2]],
        "meta/count/program/sloc/5": [[1,5]],
        "meta/count/subroutine/sloc/2": [[1,2]],
        "meta/count/variety/2": [[1,5]],
        "meta/program": [[1,5]],
        "style/procedural": [[1,5]],
        "type/sequence/string/literal": [[2,2],[3,3],[4,4],[5,5]],
        "var/assignment/implicit/parameter": [[1,1]],
        "var/scope/local": [[1,2]]
      }
    },
    "06_regex.py": {
      "timestamp": "",
      "source": "import re\nfor test_string in [\"555-1212\", \"ILL-EGAL\"]:\n    if re.match(r\"^\\d{3}-\\d{4}$\", test_string):\n        print(test_string, \"is a valid US local phone number\")\n    else:\n        print(test_string, \"rejected\")",
      "labels": {
        "argument:": [[3,3],[4,4],[6,6]],
        "argument:test_string": [[3,3],[4,4],[6,6]],
        "external_free_call:print": [[4,4],[6,6]],
        "for:test_string": [[2,6]],
        "free_call:print": [[4,4],[6,6]],
        "free_call_without_result:print": [[4,4],[6,6]],
        "global_scope:test_string": [[1,6]],
        "if": [[3,6]],
        "if_else_branch": [[6,6]],
        "if_test_atom:re": [[3,3]],
        "if_test_atom:test_string": [[3,3]],
        "if_then_branch": [[4,4]],
        "imperative_style": [[1,6]],
        "import:re": [[1,1]],
        "import_module:re": [[1,1]],
        "iteration_variable:test_string": [[2,2]],
        "literal:List": [[2,2]],
        "literal:Str": [[2,2],[2,2],[3,3],[4,4],[6,6]],
        "loaded_variable:re": [[3,3]],
        "loaded_variable:test_string": [[3,3],[4,4],[6,6]],
        "loop:for": [[2,6]],
        "loop_with_late_exit:for": [[2,6]],
        "member_call_method:match": [[3,3]],
        "node:Attribute": [[3,3]],
        "node:Call": [[3,3],[4,4],[6,6]],
        "node:Expr": [[4,4],[6,6]],
        "node:For": [[2,6]],
        "node:If": [[3,6]],
        "node:Import": [[1,1]],
        "node:List": [[2,2]],
        "node:Name": [[2,2],[3,3],[3,3],[4,4],[4,4],[6,6],[6,6]],
        "node:Str": [[2,2],[2,2],[3,3],[4,4],[6,6]],
        "scope:test_string": [[1,6]],
        "special_literal_string:^\\\\d{3}-\\\\d{4}$": [[3,3]],
        "variety:2": [[1,6]],
        "whole_span:6": [[1,6]]
      },
      "taxa": {
        "call/subroutine/builtin/print": [[4,4],[6,6]],
        "call/subroutine/method": [[3,3]],
        "flow/conditional": [[3,6]],
        "flow/conditional/else": [[6,6]],
        "flow/loop/exit/late": [[2,6]],
        "flow/loop/for": [[2,6]],
        "import/standard/re": [[1,1]],
        "meta/count/program/sloc/6": [[1,6]],
        "meta/count/variety/2": [[1,6]],
        "meta/program": [[1,6]],
        "style/imperative": [[1,6]],
        "type/sequence/list/literal": [[2,2]],
        "type/sequence/string/literal": [[2,2],[2,2],[4,4],[6,6]],
        "type/sequence/string/literal/special/\\d": [[3,3]],
        "var/assignment/implicit/iteration_variable": [[2,2]],
        "var/scope/global": [[1,6]]
      }
    },
    "07_grocery_bill.py": {
      "timestamp": "",
      "source": "prices = {\"apple\": 0.40, \"banana\": 0.50}\nmy_purchase = {\"apple\": 1, \"banana\": 6}\ngrocery_bill = sum(prices[fruit] * my_purchase[fruit] for fruit in my_purchase)\nprint(\"I owe the grocer $%.2f\" % grocery_bill)",
      "labels": {
        "argument:": [[3,3],[4,4]],
        "assignment": [[1,1],[2,2]],
        "assignment:sum": [[3,3]],
        "assignment_lhs_identifier:grocery_bill": [[3,3]],
        "assignment_lhs_identifier:my_purchase": [[2,2]],
        "assignment_lhs_identifier:prices": [[1,1]],
        "assignment_rhs_atom:0.4": [[1,1]],
        "assignment_rhs_atom:0.5": [[1,1]],
        "assignment_rhs_atom:1": [[2,2]],
        "assignment_rhs_atom:6": [[2,2]],
        "assignment_rhs_atom:fruit": [[3,3],[3,3],[3,3]],
        "assignment_rhs_atom:my_purchase": [[3,3],[3,3]],
        "assignment_rhs_atom:prices": [[3,3]],
        "binary_operator:Mod": [[4,4]],
        "binary_operator:Mult": [[3,3]],
        "comprehension:Generator": [[3,3]],
        "comprehension_for_count:1": [[3,3]],
        "external_free_call:print": [[4,4]],
        "external_free_call:sum": [[3,3]],
        "flat_style": [[1,4]],
        "free_call:print": [[4,4]],
        "free_call:sum": [[3,3]],
        "free_call_without_result:print": [[4,4]],
        "global_scope:grocery_bill": [[1,4]],
        "global_scope:my_purchase": [[1,4]],
        "global_scope:prices": [[1,4]],
        "imperative_style": [[1,4]],
        "index:fruit": [[3,3],[3,3]],
        "iteration_variable:fruit": [[3,3]],
        "literal:0.4": [[1,1]],
        "literal:0.5": [[1,1]],
        "literal:1": [[2,2]],
        "literal:6": [[2,2]],
        "literal:Dict": [[1,1],[2,2]],
        "literal:Str": [[1,1],[1,1],[2,2],[2,2],[4,4]],
        "loaded_variable:fruit": [[3,3],[3,3]],
        "loaded_variable:grocery_bill": [[4,4]],
        "loaded_variable:my_purchase": [[3,3],[3,3]],
        "loaded_variable:prices": [[3,3]],
        "local_scope:fruit": [[3,3]],
        "magic_number:0.4": [[1,1]],
        "magic_number:0.5": [[1,1]],
        "magic_number:6": [[2,2]],
        "multiplication_operator": [[3,3]],
        "node:Assign": [[1,1],[2,2],[3,3]],
        "node:BinOp": [[3,3],[4,4]],
        "node:Call": [[3,3],[4,4]],
        "node:Dict": [[1,1],[2,2]],
        "node:Expr": [[4,4]],
        "node:GeneratorExp": [[3,3]],
        "node:Name": [[1,1],[2,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[4,4],[4,4]],
        "node:Num": [[1,1],[1,1],[2,2],[2,2]],
        "node:Str": [[1,1],[1,1],[2,2],[2,2],[4,4]],
        "node:Subscript": [[3,3],[3,3]],
        "scope:fruit": [[3,3]],
        "scope:grocery_bill": [[1,4]],
        "scope:my_purchase": [[1,4]],
        "scope:prices": [[1,4]],
        "single_assignment:grocery_bill": [[3,3]],
        "single_assignment:my_purchase": [[2,2]],
        "single_assignment:prices": [[1,1]],
        "string_formatting_operator": [[4,4]],
        "variety:1": [[1,4]],
        "whole_span:4": [[1,4]]
      },
      "taxa": {
        "call/subroutine/builtin/print": [[4,4]],
        "call/subroutine/builtin/sum": [[3,3]],
        "def/subroutine/generator/expression": [[3,3]],
        "meta/count/program/sloc/4": [[1,4]],
        "meta/count/variety/1": [[1,4]],
        "meta/program": [[1,4]],
        "operator/arithmetic/multiplication": [[3,3]],
        "operator/string/format": [[4,4]],
        "style/imperative/flat": [[1,4]],
        "subscript/index": [[3,3],[3,3]],
        "type/non_sequence/dictionary/literal": [[1,1],[2,2]],
        "type/number/floating_point/literal": [[1,1],[1,1]],
        "type/number/integer/literal": [[2,2],[2,2]],
        "type/number/magic": [[1,1],[1,1],[2,2]],
        "type/sequence/string/literal": [[1,1],[1,1],[2,2],[2,2],[4,4]],
        "var/assignment/explicit/single": [[1,1],[2,2],[3,3]],
        "var/assignment/implicit/iteration_variable": [[3,3]],
        "var/scope/global": [[1,4]],
        "var/scope/local": [[3,3]]
      }
    },
    "08_arguments.py": {
      "timestamp": "",
      "source": "import sys\ntry:\n    total = sum(int(arg) for arg in sys.argv[1:])\n    print(\"sum =\", total)\nexcept ValueError:\n    print(\"Please supply integer arguments\")",
      "labels": {
        "argument:": [[3,3],[4,4],[6,6]],
        "argument:arg": [[3,3]],
        "argument:total": [[4,4]],
        "assignment:sum": [[3,3]],
        "assignment_lhs_identifier:total": [[3,3]],
        "assignment_rhs_atom:1": [[3,3]],
        "assignment_rhs_atom:arg": [[3,3],[3,3]],
        "assignment_rhs_atom:sys": [[3,3]],
        "composition": [[3,3]],
        "comprehension:Generator": [[3,3]],
        "comprehension_for_count:1": [[3,3]],
        "except:ValueError": [[5,5]],
        "external_free_call:int": [[3,3]],
        "external_free_call:print": [[4,4],[6,6]],
        "external_free_call:sum": [[3,3]],
        "free_call:int": [[3,3]],
        "free_call:print": [[4,4],[6,6]],
        "free_call:sum": [[3,3]],
        "free_call_without_result:print": [[4,4],[6,6]],
        "global_scope:total": [[1,6]],
        "imperative_style": [[1,6]],
        "import:sys": [[1,1]],
        "import_module:sys": [[1,1]],
        "iteration_variable:arg": [[3,3]],
        "literal:1": [[3,3]],
        "literal:Str": [[4,4],[6,6]],
        "loaded_variable:ValueError": [[5,5]],
        "loaded_variable:arg": [[3,3]],
        "loaded_variable:sys": [[3,3]],
        "loaded_variable:total": [[4,4]],
        "local_scope:arg": [[3,3]],
        "node:Assign": [[3,3]],
        "node:Attribute": [[3,3]],
        "node:Call": [[3,3],[3,3],[4,4],[6,6]],
        "node:ExceptHandler": [[5,6]],
        "node:Expr": [[4,4],[6,6]],
        "node:GeneratorExp": [[3,3]],
        "node:Import": [[1,1]],
        "node:Name": [[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[4,4],[4,4],[5,5],[6,6]],
        "node:Num": [[3,3]],
        "node:Str": [[4,4],[6,6]],
        "node:Subscript": [[3,3]],
        "node:Try": [[2,6]],
        "scope:arg": [[3,3]],
        "scope:total": [[1,6]],
        "single_assignment:total": [[3,3]],
        "slice:1::": [[3,3]],
        "slice_lower:1": [[3,3]],
        "slice_step:": [[3,3]],
        "slice_upper:": [[3,3]],
        "try_except:ValueError": [[2,6]],
        "value_attr:argv": [[3,3]],
        "variety:3": [[1,6]],
        "whole_span:6": [[1,6]]
      },
      "taxa": {
        "call/composition": [[3,3]],
        "call/subroutine/builtin/casting/int": [[3,3]],
        "call/subroutine/builtin/print": [[4,4],[6,6]],
        "call/subroutine/builtin/sum": [[3,3]],
        "def/subroutine/generator/expression": [[3,3]],
        "flow/exception/catch/ValueError": [[2,6]],
        "import/standard/sys": [[1,1]],
        "meta/count/program/sloc/6": [[1,6]],
        "meta/count/variety/3": [[1,6]],
        "meta/program": [[1,6]],
        "style/imperative": [[1,6]],
        "subscript/slice/start": [[3,3]],
        "type/number/integer": [[3,3]],
        "type/number/integer/literal": [[3,3]],
        "type/sequence/string/literal": [[4,4],[6,6]],
        "var/assignment/explicit/single": [[3,3]],
        "var/assignment/implicit/iteration_variable": [[3,3]],
        "var/scope/global": [[1,6]],
        "var/scope/local": [[3,3]]
      }
    },
    "09_indent.py": {
      "timestamp": "",
      "source": "import glob\npython_files = glob.glob(\"*.py\")\nfor file_name in sorted(python_files):\n    print(\"    ------\" + file_name)\n    with open(file_name) as f:\n        for line in f:\n            print(\"    \" + line.rstrip())\n    print()",
      "labels": {
        "argument:": [[2,2],[4,4],[7,7]],
        "argument:file_name": [[5,5]],
        "argument:python_files": [[3,3]],
        "assignment:glob": [[2,2]],
        "assignment_lhs_identifier:python_files": [[2,2]],
        "assignment_rhs_atom:glob": [[2,2]],
        "binary_operator:Add": [[4,4],[7,7]],
        "composition": [[7,7]],
        "concatenation_operator:Str": [[4,4],[7,7]],
        "external_free_call:open": [[5,5]],
        "external_free_call:print": [[4,4],[7,7],[8,8]],
        "external_free_call:sorted": [[3,3]],
        "for:file_name": [[3,8]],
        "for:line": [[6,7]],
        "for_each:line": [[6,7]],
        "free_call:open": [[5,5]],
        "free_call:print": [[4,4],[7,7],[8,8]],
        "free_call:sorted": [[3,3]],
        "free_call_no_arguments:print": [[8,8]],
        "free_call_without_result:print": [[4,4],[7,7],[8,8]],
        "global_scope:file_name": [[1,8]],
        "global_scope:line": [[1,8]],
        "global_scope:python_files": [[1,8]],
        "imperative_style": [[1,8]],
        "import:glob": [[1,1]],
        "import_module:glob": [[1,1]],
        "iteration_variable:file_name": [[3,3]],
        "iteration_variable:line": [[6,6]],
        "literal:Str": [[2,2],[4,4],[7,7]],
        "loaded_variable:f": [[6,6]],
        "loaded_variable:file_name": [[4,4],[5,5]],
        "loaded_variable:glob": [[2,2]],
        "loaded_variable:line": [[7,7]],
        "loaded_variable:python_files": [[3,3]],
        "loop:for": [[3,8],[6,7]],
        "loop_with_late_exit:for": [[3,8],[6,7]],
        "member_call_method:glob": [[2,2]],
        "member_call_method:rstrip": [[7,7]],
        "nested_for:1": [[6,7]],
        "node:Assign": [[2,2]],
        "node:Attribute": [[2,2],[7,7]],
        "node:BinOp": [[4,4],[7,7]],
        "node:Call": [[2,2],[3,3],[4,4],[5,5],[7,7],[7,7],[8,8]],
        "node:Expr": [[4,4],[7,7],[8,8]],
        "node:For": [[3,8],[6,7]],
        "node:Import": [[1,1]],
        "node:Name": [[2,2],[2,2],[3,3],[3,3],[3,3],[4,4],[4,4],[5,5],[5,5],[5,5],[6,6],[6,6],[7,7],[7,7],[8,8]],
        "node:Str": [[2,2],[4,4],[7,7]],
        "node:With": [[5,7]],
        "scope:file_name": [[1,8]],
        "scope:line": [[1,8]],
        "scope:python_files": [[1,8]],
        "single_assignment:python_files": [[2,2]],
        "variety:3": [[1,8]],
        "whole_span:8": [[1,8]]
      },
      "taxa": {
        "call/composition": [[7,7]],
        "call/subroutine/builtin/open": [[5,5]],
        "call/subroutine/builtin/print": [[4,4],[7,7],[8,8]],
        "call/subroutine/builtin/sorted": [[3,3]],
        "call/subroutine/method": [[2,2]],
        "call/subroutine/method/sequence/string/rstrip": [[7,7]],
        "call/subroutine/no_arguments": [[8,8]],
        "flow/loop/exit/late": [[3,8],[6,7]],
        "flow/loop/for": [[3,8]],
        "flow/loop/for/elements": [[6,7]],
        "flow/loop/for/nested/1": [[6,7]],
        "import/standard/glob": [[1,1]],
        "meta/count/program/sloc/8": [[1,8]],
        "meta/count/variety/3": [[1,8]],
        "meta/program": [[1,8]],
        "operator/string/concatenation": [[4,4],[7,7]],
        "style/imperative": [[1,8]],
        "type/sequence/string": [[7,7]],
        "type/sequence/string/literal": [[2,2],[4,4],[7,7]],
        "var/assignment/explicit/single": [[2,2]],
        "var/assignment/implicit/iteration_variable": [[3,3],[6,6]],
        "var/scope/global": [[1,8]]
      }
    },
    "10_time.py": {
      "timestamp": "",
      "source": "from time import localtime\nactivities = {\n    8: \"Sleeping\",\n    9: \"Commuting\",\n    17: \"Working\",\n    18: \"Commuting\",\n    20: \"Eating\",\n    22: \"Resting\",\n}\ntime_now = localtime()\nhour = time_now.tm_hour\nfor activity_time in sorted(activities.keys()):\n    if hour < activity_time:\n        print(activities[activity_time])\n        break\nelse:\n    print(\"Unknown, AFK or sleeping!\")",
      "labels": {
        "argument:": [[12,12],[14,14],[17,17]],
        "assignment": [[2,2],[11,11]],
        "assignment:localtime": [[10,10]],
        "assignment_lhs_identifier:activities": [[2,2]],
        "assignment_lhs_identifier:hour": [[11,11]],
        "assignment_lhs_identifier:time_now": [[10,10]],
        "assignment_rhs_atom:17": [[5,5]],
        "assignment_rhs_atom:18": [[6,6]],
        "assignment_rhs_atom:20": [[7,7]],
        "assignment_rhs_atom:22": [[8,8]],
        "assignment_rhs_atom:8": [[3,3]],
        "assignment_rhs_atom:9": [[4,4]],
        "assignment_rhs_atom:time_now": [[11,11]],
        "comparison_operator:Lt": [[13,13]],
        "composition": [[12,12]],
        "external_free_call:localtime": [[10,10]],
        "external_free_call:print": [[14,14],[17,17]],
        "external_free_call:sorted": [[12,12]],
        "for:activity_time": [[12,17]],
        "free_call:localtime": [[10,10]],
        "free_call:print": [[14,14],[17,17]],
        "free_call:sorted": [[12,12]],
        "free_call_no_arguments:localtime": [[10,10]],
        "free_call_without_result:print": [[14,14],[17,17]],
        "global_scope:activities": [[1,17]],
        "global_scope:activity_time": [[1,17]],
        "global_scope:hour": [[1,17]],
        "global_scope:time_now": [[1,17]],
        "if": [[13,15]],
        "if_test_atom:activity_time": [[13,13]],
        "if_test_atom:hour": [[13,13]],
        "if_then_branch": [[14,15]],
        "if_without_else": [[13,15]],
        "imperative_style": [[1,17]],
        "import:time:localtime": [[1,1]],
        "import_module:time": [[1,1]],
        "import_name:localtime": [[1,1]],
        "index:activity_time": [[14,14]],
        "iteration_variable:activity_time": [[12,12]],
        "literal:17": [[5,5]],
        "literal:18": [[6,6]],
        "literal:20": [[7,7]],
        "literal:22": [[8,8]],
        "literal:8": [[3,3]],
        "literal:9": [[4,4]],
        "literal:Dict": [[2,2]],
        "literal:Str": [[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[17,17]],
        "loaded_variable:activities": [[12,12],[14,14]],
        "loaded_variable:activity_time": [[13,13],[14,14]],
        "loaded_variable:hour": [[13,13]],
        "loaded_variable:time_now": [[11,11]],
        "loop:for": [[12,17]],
        "loop_else": [[17,17]],
        "loop_with_break:for": [[12,17]],
        "loop_with_early_exit:for:break": [[12,17]],
        "loop_with_else:for": [[12,17]],
        "magic_number:17": [[5,5]],
        "magic_number:18": [[6,6]],
        "magic_number:20": [[7,7]],
        "magic_number:22": [[8,8]],
        "magic_number:8": [[3,3]],
        "magic_number:9": [[4,4]],
        "member_call_method:keys": [[12,12]],
        "node:Assign": [[2,8],[10,10],[11,11]],
        "node:Attribute": [[11,11],[12,12]],
        "node:Break": [[15,15]],
        "node:Call": [[10,10],[12,12],[12,12],[14,14],[17,17]],
        "node:Compare": [[13,13]],
        "node:Dict": [[2,8]],
        "node:Expr": [[14,14],[17,17]],
        "node:For": [[12,17]],
        "node:If": [[13,15]],
        "node:ImportFrom": [[1,1]],
        "node:Name": [[2,2],[10,10],[10,10],[11,11],[11,11],[12,12],[12,12],[12,12],[13,13],[13,13],[14,14],[14,14],[14,14],[17,17]],
        "node:Num": [[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]],
        "node:Str": [[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[17,17]],
        "node:Subscript": [[14,14]],
        "scope:activities": [[1,17]],
        "scope:activity_time": [[1,17]],
        "scope:hour": [[1,17]],
        "scope:time_now": [[1,17]],
        "single_assignment:activities": [[2,2]],
        "single_assignment:hour": [[11,11]],
        "single_assignment:time_now": [[10,10]],
        "variety:5": [[1,17]],
        "whole_span:17": [[1,17]]
      },
      "taxa": {
        "call/composition": [[12,12]],
        "call/subroutine/builtin/print": [[14,14],[17,17]],
        "call/subroutine/builtin/sorted": [[12,12]],
        "call/subroutine/method/non_sequence/dictionary/keys": [[12,12]],
        "call/subroutine/no_arguments": [[10,10]],
        "condition/inequality": [[13,13]],
        "flow/conditional/no_else": [[13,15]],
        "flow/loop/exit/early/break/else": [[12,17]],
        "flow/loop/for": [[12,17]],
        "import/standard/time/localtime": [[1,1]],
        "meta/count/program/sloc/17": [[1,17]],
        "meta/count/variety/5": [[1,17]],
        "meta/program": [[1,17]],
        "style/imperative": [[1,17]],
        "subscript/index": [[14,14]],
        "type/non_sequence/dictionary": [[12,12]],
        "type/non_sequence/dictionary/literal": [[2,2]],
        "type/number/integer/literal": [[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]],
        "type/number/magic": [[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]],
        "type/sequence/string/literal": [[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[17,17]],
        "var/assignment/explicit/single": [[2,2],[10,10],[11,11]],
        "var/assignment/implicit/iteration_variable": [[12,12]],
        "var/scope/global": [[1,17]]
      }
    },
    "11_bottles.py": {
      "timestamp": "",
      "source": "REFRAIN = \"\"\"\n%d bottles of beer on the wall,\n%d bottles of beer,\ntake one down, pass it around,\n%d bottles of beer on the wall!\n\"\"\"\nbottles_of_beer = 9\nwhile bottles_of_beer > 1:\n    print(REFRAIN % (bottles_of_beer, bottles_of_beer, bottles_of_beer - 1))\n    bottles_of_beer -= 1",
      "labels": {
        "argument:": [[9,9]],
        "assignment": [[1,1]],
        "assignment:9": [[7,7]],
        "assignment_lhs_identifier:REFRAIN": [[1,1]],
        "assignment_lhs_identifier:bottles_of_beer": [[7,7],[10,10]],
        "assignment_rhs_atom:1": [[10,10]],
        "assignment_rhs_atom:9": [[7,7]],
        "augmented_assignment:Sub": [[10,10]],
        "binary_operator:Mod": [[9,9]],
        "binary_operator:Sub": [[9,9]],
        "comparison_operator:Gt": [[8,8]],
        "external_free_call:print": [[9,9]],
        "free_call:print": [[9,9]],
        "free_call_without_result:print": [[9,9]],
        "global_scope:REFRAIN": [[1,10]],
        "global_scope:bottles_of_beer": [[1,10]],
        "imperative_style": [[1,10]],
        "literal:1": [[8,8],[9,9],[10,10]],
        "literal:9": [[7,7]],
        "literal:Str": [[1,1]],
        "literal:Tuple": [[9,9]],
        "loaded_variable:REFRAIN": [[9,9]],
        "loaded_variable:bottles_of_beer": [[8,8],[9,9],[9,9],[9,9]],
        "loop:while": [[8,10]],
        "loop_with_late_exit:while": [[8,10]],
        "magic_number:9": [[7,7]],
        "modulo_operator": [[9,9]],
        "node:Assign": [[1,1],[7,7]],
        "node:AugAssign": [[10,10]],
        "node:BinOp": [[9,9],[9,9]],
        "node:Call": [[9,9]],
        "node:Compare": [[8,8]],
        "node:Expr": [[9,9]],
        "node:Name": [[1,1],[7,7],[8,8],[9,9],[9,9],[9,9],[9,9],[9,9],[10,10]],
        "node:Num": [[7,7],[8,8],[9,9],[10,10]],
        "node:Str": [[1,1]],
        "node:Tuple": [[9,9]],
        "node:While": [[8,10]],
        "scope:REFRAIN": [[1,10]],
        "scope:bottles_of_beer": [[1,10]],
        "single_assignment:REFRAIN": [[1,1]],
        "single_assignment:bottles_of_beer": [[7,7]],
        "special_literal_string:\\n%d bottles of beer on the wall,\\n%d bottles of beer,\\ntake one down, pass it around,\\n%d bottles of beer on the wall!\\n": [[1,1]],
        "update:bottles_of_beer:1": [[10,10]],
        "update_by_augmented_assignment:bottles_of_beer:1": [[10,10]],
        "update_by_augmented_assignment_with:Sub": [[10,10]],
        "update_with:Sub": [[10,10]],
        "variety:3": [[1,10]],
        "whole_span:10": [[1,10]]
      },
      "taxa": {
        "call/subroutine/builtin/print": [[9,9]],
        "condition/inequality": [[8,8]],
        "flow/loop/exit/late": [[8,10]],
        "flow/loop/while": [[8,10]],
        "meta/count/program/sloc/10": [[1,10]],
        "meta/count/variety/3": [[1,10]],
        "meta/program": [[1,10]],
        "operator/arithmetic/modulo": [[9,9]],
        "operator/arithmetic/substraction": [[9,9]],
        "style/imperative": [[1,10]],
        "type/number/integer/literal": [[7,7],[8,8],[9,9],[10,10]],
        "type/number/magic": [[7,7]],
        "type/sequence/string/literal/special/\\n": [[1,1]],
        "type/sequence/tuple/literal": [[9,9]],
        "var/assignment/explicit/augmented/Sub": [[10,10]],
        "var/assignment/explicit/constant": [[1,1]],
        "var/assignment/explicit/single": [[1,1],[7,7]],
        "var/scope/global": [[1,10]]
      }
    },
    "12_classes.py": {
      "timestamp": "",
      "source": "class BankAccount(object):\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        self.balance -= amount\n    def overdrawn(self):\n        return self.balance < 0\nmy_account = BankAccount(15)\nmy_account.withdraw(50)\nprint(my_account.balance, my_account.overdrawn())",
      "labels": {
        "argument:": [[12,12],[12,12]],
        "argument:15": [[10,10]],
        "argument:50": [[11,11]],
        "assignment": [[3,3]],
        "assignment:BankAccount": [[10,10]],
        "assignment_lhs_identifier:my_account": [[10,10]],
        "assignment_lhs_identifier:self": [[3,3],[5,5],[7,7]],
        "assignment_rhs_atom:15": [[10,10]],
        "assignment_rhs_atom:amount": [[5,5],[7,7]],
        "assignment_rhs_atom:initial_balance": [[3,3]],
        "augmented_assignment:Add": [[5,5]],
        "augmented_assignment:Sub": [[7,7]],
        "class:BankAccount": [[1,9]],
        "class_method_count:4": [[1,9]],
        "comparison_operator:Lt": [[9,9]],
        "composition": [[12,12]],
        "external_free_call:BankAccount": [[10,10]],
        "external_free_call:print": [[12,12]],
        "free_call:BankAccount": [[10,10]],
        "free_call:print": [[12,12]],
        "free_call_without_result:print": [[12,12]],
        "function:__init__": [[2,3]],
        "function:deposit": [[4,5]],
        "function:overdrawn": [[8,9]],
        "function:withdraw": [[6,7]],
        "function_line_count:2": [[2,3],[4,5],[6,7],[8,9]],
        "function_parameter:amount": [[4,4],[6,6]],
        "function_parameter:initial_balance": [[2,2]],
        "function_parameter:self": [[2,2],[4,4],[6,6],[8,8]],
        "function_parameter_default:Num": [[2,2]],
        "function_parameter_flavor:arg": [[2,2],[2,2],[4,4],[4,4],[6,6],[6,6],[8,8]],
        "function_returning_nothing:__init__": [[2,3]],
        "function_returning_nothing:deposit": [[4,5]],
        "function_returning_nothing:withdraw": [[6,7]],
        "function_returning_something:overdrawn": [[8,9]],
        "global_scope:my_account": [[1,12]],
        "instance_method:__init__": [[2,3]],
        "instance_method:deposit": [[4,5]],
        "instance_method:overdrawn": [[8,9]],
        "instance_method:withdraw": [[6,7]],
        "literal:0": [[2,2],[9,9]],
        "literal:15": [[10,10]],
        "literal:50": [[11,11]],
        "loaded_variable:amount": [[5,5],[7,7]],
        "loaded_variable:initial_balance": [[3,3]],
        "loaded_variable:my_account": [[11,11],[12,12],[12,12]],
        "loaded_variable:object": [[1,1]],
        "loaded_variable:self": [[3,3],[5,5],[7,7],[9,9]],
        "local_scope:amount": [[4,5],[6,7]],
        "local_scope:initial_balance": [[2,3]],
        "local_scope:self": [[2,3],[4,5],[6,7],[8,9]],
        "magic_number:15": [[10,10]],
        "magic_number:50": [[11,11]],
        "member_call:my_account:withdraw": [[11,11]],
        "member_call_method:overdrawn": [[12,12]],
        "member_call_method:withdraw": [[11,11]],
        "member_call_object:my_account": [[11,11]],
        "method:__init__": [[2,3]],
        "method:deposit": [[4,5]],
        "method:overdrawn": [[8,9]],
        "method:withdraw": [[6,7]],
        "node:Assign": [[3,3],[10,10]],
        "node:Attribute": [[3,3],[5,5],[7,7],[9,9],[11,11],[12,12],[12,12]],
        "node:AugAssign": [[5,5],[7,7]],
        "node:Call": [[10,10],[11,11],[12,12],[12,12]],
        "node:ClassDef": [[1,9]],
        "node:Compare": [[9,9]],
        "node:Expr": [[11,11],[12,12]],
        "node:FunctionDef": [[2,3],[4,5],[6,7],[8,9]],
        "node:Name": [[1,1],[3,3],[3,3],[5,5],[5,5],[7,7],[7,7],[9,9],[10,10],[10,10],[11,11],[12,12],[12,12],[12,12]],
        "node:Num": [[2,2],[9,9],[10,10],[11,11]],
        "node:Return": [[9,9]],
        "node:arg": [[2,2],[2,2],[4,4],[4,4],[6,6],[6,6],[8,8]],
        "object_oriented_style": [[1,12]],
        "return": [[9,9]],
        "scope:amount": [[4,5],[6,7]],
        "scope:initial_balance": [[2,3]],
        "scope:my_account": [[1,12]],
        "scope:self": [[2,3],[4,5],[6,7],[8,9]],
        "single_assignment:my_account": [[10,10]],
        "update:self:amount": [[5,5],[7,7]],
        "update_by_augmented_assignment:self:amount": [[5,5],[7,7]],
        "update_by_augmented_assignment_with:Add": [[5,5]],
        "update_by_augmented_assignment_with:Sub": [[7,7]],
        "update_with:Add": [[5,5]],
        "update_with:Sub": [[7,7]],
        "variety:4": [[1,12]],
        "whole_span:12": [[1,12]]
      },
      "taxa": {
        "call/class/construct": [[10,10]],
        "call/composition": [[12,12]],
        "call/subroutine/builtin/print": [[12,12]],
        "call/subroutine/method": [[11,11],[12,12]],
        "condition/inequality": [[9,9]],
        "def/class": [[1,9]],
        "def/subroutine/function": [[8,9]],
        "def/subroutine/method/flavor/instance": [[2,3],[4,5],[6,7],[8,9]],
        "def/subroutine/method/naming/magic/__init__": [[2,3]],
        "def/subroutine/parameter/arg": [[2,2],[2,2],[4,4],[4,4],[6,6],[6,6],[8,8]],
        "def/subroutine/parameter/default/Num": [[2,2]],
        "def/subroutine/procedure": [[2,3],[4,5],[6,7]],
        "def/subroutine/return/something": [[9,9]],
        "meta/count/class/methods/4": [[1,9]],
        "meta/count/program/sloc/12": [[1,12]],
        "meta/count/subroutine/sloc/2": [[2,3],[4,5],[6,7],[8,9]],
        "meta/count/variety/4": [[1,12]],
        "meta/program": [[1,12]],
        "style/object_oriented": [[1,12]],
        "type/number/integer/literal": [[10,10],[11,11]],
        "type/number/integer/literal/zero": [[2,2],[9,9]],
        "type/number/magic": [[10,10],[11,11]],
        "var/assignment/explicit": [[3,3]],
        "var/assignment/explicit/augmented/Add": [[5,5]],
        "var/assignment/explicit/augmented/Sub": [[7,7]],
        "var/assignment/explicit/single": [[10,10]],
        "var/assignment/implicit/parameter": [[2,2],[4,4],[6,6]],
        "var/assignment/implicit/parameter/self": [[2,2],[4,4],[6,6],[8,8]],
        "var/scope/global": [[1,12]],
        "var/scope/local": [[2,3],[4,5],[6,7],[8,9]]
      }
    },
    "13_unit_testing.py": {
      "timestamp": "",
      "source": "import unittest\ndef median(pool):\n    copy = sorted(pool)\n    size = len(copy)\n    if size % 2 == 1:\n        return copy[int((size - 1) / 2)]\n    else:\n        return (copy[int(size / 2 - 1)] + copy[int(size / 2)]) / 2\nclass TestMedian(unittest.TestCase):\n    def testMedian(self):\n        self.assertEqual(median([2, 9, 9, 7, 9, 2, 4, 5, 8]), 7)",
      "labels": {
        "addition_operator": [[8,8]],
        "argument:": [[6,6],[8,8],[8,8],[11,11],[11,11]],
        "argument:7": [[11,11]],
        "argument:copy": [[4,4]],
        "argument:pool": [[3,3]],
        "assignment:len": [[4,4]],
        "assignment:sorted": [[3,3]],
        "assignment_lhs_identifier:copy": [[3,3]],
        "assignment_lhs_identifier:size": [[4,4]],
        "assignment_rhs_atom:copy": [[4,4]],
        "assignment_rhs_atom:pool": [[3,3]],
        "binary_operator:Add": [[8,8]],
        "binary_operator:Div": [[6,6],[8,8],[8,8],[8,8]],
        "binary_operator:Mod": [[5,5]],
        "binary_operator:Sub": [[6,6],[8,8]],
        "class:TestMedian": [[9,11]],
        "class_method_count:1": [[9,11]],
        "comparison_operator:Eq": [[5,5]],
        "composition": [[11,11]],
        "divisibility_test:2": [[5,5]],
        "external_free_call:int": [[6,6],[8,8],[8,8]],
        "external_free_call:len": [[4,4]],
        "external_free_call:sorted": [[3,3]],
        "free_call:int": [[6,6],[8,8],[8,8]],
        "free_call:len": [[4,4]],
        "free_call:median": [[11,11]],
        "free_call:sorted": [[3,3]],
        "function:median": [[2,8]],
        "function:testMedian": [[10,11]],
        "function_line_count:2": [[10,11]],
        "function_line_count:7": [[2,8]],
        "function_parameter:pool": [[2,2]],
        "function_parameter:self": [[10,10]],
        "function_parameter_flavor:arg": [[2,2],[10,10]],
        "function_returning_nothing:testMedian": [[10,11]],
        "function_returning_something:median": [[2,8]],
        "if": [[5,8]],
        "if_else_branch": [[8,8]],
        "if_test_atom:1": [[5,5]],
        "if_test_atom:2": [[5,5]],
        "if_test_atom:size": [[5,5]],
        "if_then_branch": [[6,6]],
        "import:unittest": [[1,1]],
        "import_module:unittest": [[1,1]],
        "impure_function:median": [[2,8]],
        "index:_": [[6,6],[8,8],[8,8]],
        "instance_method:testMedian": [[10,11]],
        "internal_free_call:median": [[11,11]],
        "literal:1": [[5,5],[6,6],[8,8]],
        "literal:2": [[5,5],[6,6],[8,8],[8,8],[8,8],[11,11],[11,11]],
        "literal:4": [[11,11]],
        "literal:5": [[11,11]],
        "literal:7": [[11,11],[11,11]],
        "literal:8": [[11,11]],
        "literal:9": [[11,11],[11,11],[11,11]],
        "literal:List": [[11,11]],
        "loaded_variable:copy": [[4,4],[6,6],[8,8],[8,8]],
        "loaded_variable:pool": [[3,3]],
        "loaded_variable:self": [[11,11]],
        "loaded_variable:size": [[5,5],[6,6],[8,8],[8,8]],
        "loaded_variable:unittest": [[9,9]],
        "local_scope:copy": [[2,8]],
        "local_scope:pool": [[2,8]],
        "local_scope:self": [[10,11]],
        "local_scope:size": [[2,8]],
        "magic_number:4": [[11,11]],
        "magic_number:5": [[11,11]],
        "magic_number:7": [[11,11],[11,11]],
        "magic_number:8": [[11,11]],
        "magic_number:9": [[11,11],[11,11],[11,11]],
        "member_call:self:assertEqual": [[11,11]],
        "member_call_method:assertEqual": [[11,11]],
        "member_call_object:self": [[11,11]],
        "method:testMedian": [[10,11]],
        "modulo_operator": [[5,5]],
        "node:Assign": [[3,3],[4,4]],
        "node:Attribute": [[9,9],[11,11]],
        "node:BinOp": [[5,5],[6,6],[6,6],[8,8],[8,8],[8,8],[8,8],[8,8]],
        "node:Call": [[3,3],[4,4],[6,6],[8,8],[8,8],[11,11],[11,11]],
        "node:ClassDef": [[9,11]],
        "node:Compare": [[5,5]],
        "node:Expr": [[11,11]],
        "node:FunctionDef": [[2,8],[10,11]],
        "node:If": [[5,8]],
        "node:Import": [[1,1]],
        "node:List": [[11,11]],
        "node:Name": [[3,3],[3,3],[3,3],[4,4],[4,4],[4,4],[5,5],[6,6],[6,6],[6,6],[8,8],[8,8],[8,8],[8,8],[8,8],[8,8],[9,9],[11,11],[11,11]],
        "node:Num": [[5,5],[5,5],[6,6],[6,6],[8,8],[8,8],[8,8],[8,8],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11]],
        "node:Return": [[6,6],[8,8]],
        "node:Subscript": [[6,6],[8,8],[8,8]],
        "node:arg": [[2,2],[10,10]],
        "object_oriented_style": [[1,11]],
        "return": [[6,6],[8,8]],
        "scope:copy": [[2,8]],
        "scope:pool": [[2,8]],
        "scope:self": [[10,11]],
        "scope:size": [[2,8]],
        "single_assignment:copy": [[3,3]],
        "single_assignment:size": [[4,4]],
        "variety:3": [[1,11]],
        "whole_span:11": [[1,11]]
      },
      "taxa": {
        "call/composition": [[11,11]],
        "call/subroutine": [[11,11]],
        "call/subroutine/builtin/casting/int": [[6,6],[8,8],[8,8]],
        "call/subroutine/builtin/len": [[4,4]],
        "call/subroutine/builtin/sorted": [[3,3]],
        "call/subroutine/method": [[11,11]],
        "condition/divisibility/parity": [[5,5]],
        "condition/equality": [[5,5]],
        "def/class": [[9,11]],
        "def/subroutine/function/impure": [[2,8]],
        "def/subroutine/method/flavor/instance": [[10,11]],
        "def/subroutine/parameter/arg": [[2,2],[10,10]],
        "def/subroutine/procedure": [[10,11]],
        "def/subroutine/return/something": [[6,6],[8,8]],
        "flow/conditional": [[5,8]],
        "flow/conditional/else": [[8,8]],
        "import/standard/unittest": [[1,1]],
        "meta/count/class/methods/1": [[9,11]],
        "meta/count/program/sloc/11": [[1,11]],
        "meta/count/subroutine/sloc/2": [[10,11]],
        "meta/count/subroutine/sloc/7": [[2,8]],
        "meta/count/variety/3": [[1,11]],
        "meta/program": [[1,11]],
        "operator/arithmetic/addition": [[8,8]],
        "operator/arithmetic/division": [[6,6],[8,8],[8,8],[8,8]],
        "operator/arithmetic/modulo": [[5,5]],
        "operator/arithmetic/substraction": [[6,6],[8,8]],
        "style/object_oriented": [[1,11]],
        "subscript/index": [[6,6],[8,8],[8,8]],
        "type/number/integer": [[6,6],[8,8],[8,8]],
        "type/number/integer/literal": [[5,5],[5,5],[6,6],[6,6],[8,8],[8,8],[8,8],[8,8],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11]],
        "type/number/magic": [[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11]],
        "type/sequence/list/literal": [[11,11]],
        "var/assignment/explicit/single": [[3,3],[4,4]],
        "var/assignment/implicit/parameter": [[2,2]],
        "var/assignment/implicit/parameter/self": [[10,10]],
        "var/scope/local": [[2,8],[10,11]]
      }
    },
    "14_median.py": {
      "timestamp": "",
      "source": "def median(pool):\n    copy = sorted(pool)\n    size = len(copy)\n    if size % 2 == 1:\n        return copy[int((size - 1) / 2)]\n    else:\n        return (copy[int(size / 2 - 1)] + copy[int(size / 2)]) / 2",
      "labels": {
        "addition_operator": [[7,7]],
        "argument:": [[5,5],[7,7],[7,7]],
        "argument:copy": [[3,3]],
        "argument:pool": [[2,2]],
        "assignment:len": [[3,3]],
        "assignment:sorted": [[2,2]],
        "assignment_lhs_identifier:copy": [[2,2]],
        "assignment_lhs_identifier:size": [[3,3]],
        "assignment_rhs_atom:copy": [[3,3]],
        "assignment_rhs_atom:pool": [[2,2]],
        "binary_operator:Add": [[7,7]],
        "binary_operator:Div": [[5,5],[7,7],[7,7],[7,7]],
        "binary_operator:Mod": [[4,4]],
        "binary_operator:Sub": [[5,5],[7,7]],
        "comparison_operator:Eq": [[4,4]],
        "divisibility_test:2": [[4,4]],
        "external_free_call:int": [[5,5],[7,7],[7,7]],
        "external_free_call:len": [[3,3]],
        "external_free_call:sorted": [[2,2]],
        "free_call:int": [[5,5],[7,7],[7,7]],
        "free_call:len": [[3,3]],
        "free_call:sorted": [[2,2]],
        "function:median": [[1,7]],
        "function_line_count:7": [[1,7]],
        "function_parameter:pool": [[1,1]],
        "function_parameter_flavor:arg": [[1,1]],
        "function_returning_something:median": [[1,7]],
        "if": [[4,7]],
        "if_else_branch": [[7,7]],
        "if_test_atom:1": [[4,4]],
        "if_test_atom:2": [[4,4]],
        "if_test_atom:size": [[4,4]],
        "if_then_branch": [[5,5]],
        "impure_function:median": [[1,7]],
        "index:_": [[5,5],[7,7],[7,7]],
        "literal:1": [[4,4],[5,5],[7,7]],
        "literal:2": [[4,4],[5,5],[7,7],[7,7],[7,7]],
        "loaded_variable:copy": [[3,3],[5,5],[7,7],[7,7]],
        "loaded_variable:pool": [[2,2]],
        "loaded_variable:size": [[4,4],[5,5],[7,7],[7,7]],
        "local_scope:copy": [[1,7]],
        "local_scope:pool": [[1,7]],
        "local_scope:size": [[1,7]],
        "modulo_operator": [[4,4]],
        "node:Assign": [[2,2],[3,3]],
        "node:BinOp": [[4,4],[5,5],[5,5],[7,7],[7,7],[7,7],[7,7],[7,7]],
        "node:Call": [[2,2],[3,3],[5,5],[7,7],[7,7]],
        "node:Compare": [[4,4]],
        "node:FunctionDef": [[1,7]],
        "node:If": [[4,7]],
        "node:Name": [[2,2],[2,2],[2,2],[3,3],[3,3],[3,3],[4,4],[5,5],[5,5],[5,5],[7,7],[7,7],[7,7],[7,7],[7,7],[7,7]],
        "node:Num": [[4,4],[4,4],[5,5],[5,5],[7,7],[7,7],[7,7],[7,7]],
        "node:Return": [[5,5],[7,7]],
        "node:Subscript": [[5,5],[7,7],[7,7]],
        "node:arg": [[1,1]],
        "procedural_style": [[1,7]],
        "return": [[5,5],[7,7]],
        "scope:copy": [[1,7]],
        "scope:pool": [[1,7]],
        "scope:size": [[1,7]],
        "single_assignment:copy": [[2,2]],
        "single_assignment:size": [[3,3]],
        "variety:2": [[1,7]],
        "whole_span:7": [[1,7]]
      },
      "taxa": {
        "call/subroutine/builtin/casting/int": [[5,5],[7,7],[7,7]],
        "call/subroutine/builtin/len": [[3,3]],
        "call/subroutine/builtin/sorted": [[2,2]],
        "condition/divisibility/parity": [[4,4]],
        "condition/equality": [[4,4]],
        "def/subroutine/function/impure": [[1,7]],
        "def/subroutine/parameter/arg": [[1,1]],
        "def/subroutine/return/something": [[5,5],[7,7]],
        "flow/conditional": [[4,7]],
        "flow/conditional/else": [[7,7]],
        "meta/count/program/sloc/7": [[1,7]],
        "meta/count/subroutine/sloc/7": [[1,7]],
        "meta/count/variety/2": [[1,7]],
        "meta/program": [[1,7]],
        "operator/arithmetic/addition": [[7,7]],
        "operator/arithmetic/division": [[5,5],[7,7],[7,7],[7,7]],
        "operator/arithmetic/modulo": [[4,4]],
        "operator/arithmetic/substraction": [[5,5],[7,7]],
        "style/procedural": [[1,7]],
        "subscript/index": [[5,5],[7,7],[7,7]],
        "type/number/integer": [[5,5],[7,7],[7,7]],
        "type/number/integer/literal": [[4,4],[4,4],[5,5],[5,5],[7,7],[7,7],[7,7],[7,7]],
        "var/assignment/explicit/single": [[2,2],[3,3]],
        "var/assignment/implicit/parameter": [[1,1]],
        "var/scope/local": [[1,7]]
      }
    },
    "15_itertools_groupby.py": {
      "timestamp": "",
      "source": "from itertools import groupby\nlines = \"\"\"\nThis is the\nfirst paragraph.\nThis is the second.\n\"\"\".splitlines()\nfor has_chars, frags in groupby(lines, bool):\n    if has_chars:\n        print(\" \".join(frags))",
      "labels": {
        "argument:": [[9,9]],
        "argument:bool": [[7,7]],
        "argument:frags": [[9,9]],
        "argument:lines": [[7,7]],
        "assignment:splitlines": [[2,2]],
        "assignment_lhs_identifier:lines": [[2,2]],
        "composition": [[9,9]],
        "external_free_call:groupby": [[7,7]],
        "external_free_call:print": [[9,9]],
        "for:frags": [[7,9]],
        "for:has_chars": [[7,9]],
        "free_call:groupby": [[7,7]],
        "free_call:print": [[9,9]],
        "free_call_without_result:print": [[9,9]],
        "global_scope:frags": [[1,9]],
        "global_scope:has_chars": [[1,9]],
        "global_scope:lines": [[1,9]],
        "if": [[8,9]],
        "if_then_branch": [[9,9]],
        "if_without_else": [[8,9]],
        "imperative_style": [[1,9]],
        "import:itertools:groupby": [[1,1]],
        "import_module:itertools": [[1,1]],
        "import_name:groupby": [[1,1]],
        "iteration_variable:frags": [[7,7]],
        "iteration_variable:has_chars": [[7,7]],
        "literal:Str": [[2,2],[9,9]],
        "literal:Tuple": [[7,7]],
        "loaded_variable:bool": [[7,7]],
        "loaded_variable:frags": [[9,9]],
        "loaded_variable:has_chars": [[8,8]],
        "loaded_variable:lines": [[7,7]],
        "loop:for": [[7,9]],
        "loop_with_late_exit:for": [[7,9]],
        "member_call_method:join": [[9,9]],
        "member_call_method:splitlines": [[2,2]],
        "node:Assign": [[2,2]],
        "node:Attribute": [[2,2],[9,9]],
        "node:Call": [[2,2],[7,7],[9,9],[9,9]],
        "node:Expr": [[9,9]],
        "node:For": [[7,9]],
        "node:If": [[8,9]],
        "node:ImportFrom": [[1,1]],
        "node:Name": [[2,2],[7,7],[7,7],[7,7],[7,7],[7,7],[8,8],[9,9],[9,9]],
        "node:Str": [[2,2],[9,9]],
        "node:Tuple": [[7,7]],
        "scope:frags": [[1,9]],
        "scope:has_chars": [[1,9]],
        "scope:lines": [[1,9]],
        "single_assignment:lines": [[2,2]],
        "special_literal_string:\\nThis is the\\nfirst paragraph.\\nThis is the second.\\n": [[2,2]],
        "variety:3": [[1,9]],
        "whole_span:9": [[1,9]]
      },
      "taxa": {
        "call/composition": [[9,9]],
        "call/subroutine": [[7,7]],
        "call/subroutine/builtin/print": [[9,9]],
        "call/subroutine/method/sequence/string/join": [[9,9]],
        "call/subroutine/method/sequence/string/splitlines": [[2,2]],
        "flow/conditional/no_else": [[8,9]],
        "flow/loop/exit/late": [[7,9]],
        "flow/loop/for": [[7,9]],
        "import/standard/itertools/groupby": [[1,1]],
        "meta/count/program/sloc/9": [[1,9]],
        "meta/count/variety/3": [[1,9]],
        "meta/program": [[1,9]],
        "style/imperative": [[1,9]],
        "type/sequence/string": [[2,2],[9,9]],
        "type/sequence/string/literal": [[9,9]],
        "type/sequence/string/literal/special/\\n": [[2,2]],
        "type/sequence/tuple/literal": [[7,7]],
        "var/assignment/explicit/single": [[2,2]],
        "var/assignment/implicit/iteration_variable": [[7,7],[7,7]],
        "var/scope/global": [[1,9]]
      }
    },
    "16_csv.py": {
      "timestamp": "",
      "source": "import csv\ndef cmp(a, b):\n    return (a > b) - (a < b)\nwith open(\"stocks.csv\", \"w\", newline=\"\") as stocksFileW:\n    writer = csv.writer(stocksFileW)\n    writer.writerows(\n        [\n            [\"GOOG\", \"Google, Inc.\", 505.24, 0.47, 0.09],\n            [\"YHOO\", \"Yahoo! Inc.\", 27.38, 0.33, 1.22],\n            [\"CNET\", \"CNET Networks, Inc.\", 8.62, -0.13, -1.4901],\n        ]\n    )\nwith open(\"stocks.csv\", \"r\") as stocksFile:\n    stocks = csv.reader(stocksFile)\n    status_labels = {-1: \"down\", 0: \"unchanged\", 1: \"up\"}\n    for ticker, name, price, change, pct in stocks:\n        status = status_labels[cmp(float(change), 0.0)]\n        print(\"{} is {} ({:.2f})\".format(name, status, float(pct)))",
      "labels": {
        "argument:": [[4,4],[4,4],[4,4],[7,7],[13,13],[13,13],[17,17],[18,18],[18,18]],
        "argument:0.0": [[17,17]],
        "argument:change": [[17,17]],
        "argument:name": [[18,18]],
        "argument:pct": [[18,18]],
        "argument:status": [[18,18]],
        "argument:stocksFile": [[14,14]],
        "argument:stocksFileW": [[5,5]],
        "assignment": [[15,15],[17,17]],
        "assignment:reader": [[14,14]],
        "assignment:writer": [[5,5]],
        "assignment_lhs_identifier:status": [[17,17]],
        "assignment_lhs_identifier:status_labels": [[15,15]],
        "assignment_lhs_identifier:stocks": [[14,14]],
        "assignment_lhs_identifier:writer": [[5,5]],
        "assignment_rhs_atom:-1": [[15,15]],
        "assignment_rhs_atom:0": [[15,15]],
        "assignment_rhs_atom:0.0": [[17,17]],
        "assignment_rhs_atom:1": [[15,15]],
        "assignment_rhs_atom:change": [[17,17]],
        "assignment_rhs_atom:csv": [[5,5],[14,14]],
        "assignment_rhs_atom:status_labels": [[17,17]],
        "assignment_rhs_atom:stocksFile": [[14,14]],
        "assignment_rhs_atom:stocksFileW": [[5,5]],
        "binary_operator:Sub": [[3,3]],
        "comparison_operator:Gt": [[3,3]],
        "comparison_operator:Lt": [[3,3]],
        "composition": [[17,17],[18,18],[18,18]],
        "empty_literal:Str": [[4,4]],
        "external_free_call:float": [[17,17],[18,18]],
        "external_free_call:open": [[4,4],[13,13]],
        "external_free_call:print": [[18,18]],
        "for:change": [[16,18]],
        "for:name": [[16,18]],
        "for:pct": [[16,18]],
        "for:price": [[16,18]],
        "for:ticker": [[16,18]],
        "for_each:change": [[16,18]],
        "for_each:name": [[16,18]],
        "for_each:pct": [[16,18]],
        "for_each:price": [[16,18]],
        "for_each:ticker": [[16,18]],
        "free_call:cmp": [[17,17]],
        "free_call:float": [[17,17],[18,18]],
        "free_call:open": [[4,4],[13,13]],
        "free_call:print": [[18,18]],
        "free_call_with_keyword_argument:open:newline": [[4,4]],
        "free_call_without_result:print": [[18,18]],
        "function:cmp": [[2,3]],
        "function_line_count:2": [[2,3]],
        "function_parameter:a": [[2,2]],
        "function_parameter:b": [[2,2]],
        "function_parameter_flavor:arg": [[2,2],[2,2]],
        "function_returning_something:cmp": [[2,3]],
        "global_scope:change": [[1,18]],
        "global_scope:name": [[1,18]],
        "global_scope:pct": [[1,18]],
        "global_scope:price": [[1,18]],
        "global_scope:status": [[1,18]],
        "global_scope:status_labels": [[1,18]],
        "global_scope:stocks": [[1,18]],
        "global_scope:ticker": [[1,18]],
        "global_scope:writer": [[1,18]],
        "import:csv": [[1,1]],
        "import_module:csv": [[1,1]],
        "index:_": [[17,17]],
        "internal_free_call:cmp": [[17,17]],
        "iteration_variable:change": [[16,16]],
        "iteration_variable:name": [[16,16]],
        "iteration_variable:pct": [[16,16]],
        "iteration_variable:price": [[16,16]],
        "iteration_variable:ticker": [[16,16]],
        "keyword_argument:newline": [[4,4]],
        "literal:-0.13": [[10,10]],
        "literal:-1": [[15,15]],
        "literal:-1.4901": [[10,10]],
        "literal:0": [[15,15]],
        "literal:0.0": [[17,17]],
        "literal:0.09": [[8,8]],
        "literal:0.33": [[9,9]],
        "literal:0.47": [[8,8]],
        "literal:1": [[15,15]],
        "literal:1.22": [[9,9]],
        "literal:27.38": [[9,9]],
        "literal:505.24": [[8,8]],
        "literal:8.62": [[10,10]],
        "literal:Dict": [[15,15]],
        "literal:List": [[7,7],[8,8],[9,9],[10,10]],
        "literal:Str": [[4,4],[4,4],[4,4],[8,8],[8,8],[9,9],[9,9],[10,10],[10,10],[13,13],[13,13],[15,15],[15,15],[15,15],[18,18]],
        "literal:Tuple": [[16,16]],
        "loaded_variable:a": [[3,3],[3,3]],
        "loaded_variable:b": [[3,3],[3,3]],
        "loaded_variable:change": [[17,17]],
        "loaded_variable:csv": [[5,5],[14,14]],
        "loaded_variable:name": [[18,18]],
        "loaded_variable:pct": [[18,18]],
        "loaded_variable:status": [[18,18]],
        "loaded_variable:status_labels": [[17,17]],
        "loaded_variable:stocks": [[16,16]],
        "loaded_variable:stocksFile": [[14,14]],
        "loaded_variable:stocksFileW": [[5,5]],
        "loaded_variable:writer": [[6,6]],
        "local_scope:a": [[2,3]],
        "local_scope:b": [[2,3]],
        "loop:for": [[16,18]],
        "loop_with_late_exit:for": [[16,18]],
        "magic_number:-0.13": [[10,10]],
        "magic_number:-1.4901": [[10,10]],
        "magic_number:0.0": [[17,17]],
        "magic_number:0.09": [[8,8]],
        "magic_number:0.33": [[9,9]],
        "magic_number:0.47": [[8,8]],
        "magic_number:1.22": [[9,9]],
        "magic_number:27.38": [[9,9]],
        "magic_number:505.24": [[8,8]],
        "magic_number:8.62": [[10,10]],
        "member_call:writer:writerows": [[6,6]],
        "member_call_method:format": [[18,18]],
        "member_call_method:reader": [[14,14]],
        "member_call_method:writer": [[5,5]],
        "member_call_method:writerows": [[6,6]],
        "member_call_object:writer": [[6,6]],
        "node:Assign": [[5,5],[14,14],[15,15],[17,17]],
        "node:Attribute": [[5,5],[6,6],[14,14],[18,18]],
        "node:BinOp": [[3,3]],
        "node:Call": [[4,4],[5,5],[6,10],[13,13],[14,14],[17,17],[17,17],[18,18],[18,18],[18,18]],
        "node:Compare": [[3,3],[3,3]],
        "node:Dict": [[15,15]],
        "node:Expr": [[6,10],[18,18]],
        "node:For": [[16,18]],
        "node:FunctionDef": [[2,3]],
        "node:Import": [[1,1]],
        "node:List": [[7,10],[8,8],[9,9],[10,10]],
        "node:Name": [[3,3],[3,3],[3,3],[3,3],[4,4],[4,4],[5,5],[5,5],[5,5],[6,6],[13,13],[13,13],[14,14],[14,14],[14,14],[15,15],[16,16],[16,16],[16,16],[16,16],[16,16],[16,16],[17,17],[17,17],[17,17],[17,17],[17,17],[18,18],[18,18],[18,18],[18,18],[18,18]],
        "node:Num": [[8,8],[8,8],[8,8],[9,9],[9,9],[9,9],[10,10],[10,10],[10,10],[15,15],[15,15],[15,15],[17,17]],
        "node:Return": [[3,3]],
        "node:Str": [[4,4],[4,4],[4,4],[8,8],[8,8],[9,9],[9,9],[10,10],[10,10],[13,13],[13,13],[15,15],[15,15],[15,15],[18,18]],
        "node:Subscript": [[17,17]],
        "node:Tuple": [[16,16]],
        "node:With": [[4,10],[13,18]],
        "node:arg": [[2,2],[2,2]],
        "procedural_style": [[1,18]],
        "pure_function:cmp": [[2,3]],
        "return": [[3,3]],
        "scope:a": [[2,3]],
        "scope:b": [[2,3]],
        "scope:change": [[1,18]],
        "scope:name": [[1,18]],
        "scope:pct": [[1,18]],
        "scope:price": [[1,18]],
        "scope:status": [[1,18]],
        "scope:status_labels": [[1,18]],
        "scope:stocks": [[1,18]],
        "scope:ticker": [[1,18]],
        "scope:writer": [[1,18]],
        "single_assignment:status": [[17,17]],
        "single_assignment:status_labels": [[15,15]],
        "single_assignment:stocks": [[14,14]],
        "single_assignment:writer": [[5,5]],
        "variety:3": [[1,18]],
        "whole_span:18": [[1,18]]
      },
      "taxa": {
        "call/composition": [[17,17],[18,18],[18,18]],
        "call/subroutine": [[17,17]],
        "call/subroutine/builtin/casting/float": [[17,17],[18,18]],
        "call/subroutine/builtin/open": [[4,4],[13,13]],
        "call/subroutine/builtin/print": [[18,18]],
        "call/subroutine/method": [[5,5],[6,6],[14,14]],
        "call/subroutine/method/sequence/string/format": [[18,18]],
        "condition/inequality": [[3,3],[3,3]],
        "def/subroutine/function/pure": [[2,3]],
        "def/subroutine/parameter/arg": [[2,2],[2,2]],
        "def/subroutine/return/something": [[3,3]],
        "flow/loop/exit/late": [[16,18]],
        "flow/loop/for/elements": [[16,18]],
        "import/standard/csv": [[1,1]],
        "meta/count/program/sloc/18": [[1,18]],
        "meta/count/subroutine/sloc/2": [[2,3]],
        "meta/count/variety/3": [[1,18]],
        "meta/program": [[1,18]],
        "operator/arithmetic/substraction": [[3,3]],
        "style/functional_trait/pure_function": [[2,3]],
        "style/procedural": [[1,18]],
        "subscript/index": [[17,17]],
        "type/non_sequence/dictionary/literal": [[15,15]],
        "type/number/floating_point": [[17,17],[18,18]],
        "type/number/floating_point/literal": [[8,8],[8,8],[8,8],[9,9],[9,9],[9,9],[10,10],[10,10],[10,10]],
        "type/number/floating_point/literal/zero": [[17,17]],
        "type/number/integer/literal": [[15,15],[15,15]],
        "type/number/integer/literal/zero": [[15,15]],
        "type/number/magic": [[8,8],[8,8],[8,8],[9,9],[9,9],[9,9],[10,10],[10,10],[10,10],[17,17]],
        "type/sequence/list/literal": [[7,7],[8,8],[9,9],[10,10]],
        "type/sequence/string": [[18,18]],
        "type/sequence/string/literal": [[4,4],[4,4],[8,8],[8,8],[9,9],[9,9],[10,10],[10,10],[13,13],[13,13],[15,15],[15,15],[15,15],[18,18]],
        "type/sequence/string/literal/empty": [[4,4]],
        "type/sequence/tuple/literal": [[16,16]],
        "var/assignment/explicit/single": [[5,5],[14,14],[15,15],[17,17]],
        "var/assignment/implicit/iteration_variable": [[16,16],[16,16],[16,16],[16,16],[16,16]],
        "var/assignment/implicit/parameter": [[2,2],[2,2]],
        "var/scope/global": [[1,18]],
        "var/scope/local": [[2,3]]
      }
    },
    "18_queens.py": {
      "timestamp": "",
      "source": "BOARD_SIZE = 8\ndef under_attack(col, queens):\n    left = right = col\n    for r, c in reversed(queens):\n        left, right = left - 1, right + 1\n        if c in (left, col, right):\n            return True\n    return False\ndef solve(n):\n    if n == 0:\n        return [[]]\n    smaller_solutions = solve(n - 1)\n    return [\n        solution + [(n, i + 1)]\n        for i in range(BOARD_SIZE)\n        for solution in smaller_solutions\n        if not under_attack(i + 1, solution)\n    ]\nfor answer in solve(BOARD_SIZE):\n    print(answer)",
      "labels": {
        "access_outer_scope:BOARD_SIZE": [[9,17]],
        "addition_operator": [[5,5],[17,17]],
        "argument:": [[12,12],[17,17]],
        "argument:BOARD_SIZE": [[15,15],[19,19]],
        "argument:answer": [[20,20]],
        "argument:queens": [[4,4]],
        "argument:solution": [[17,17]],
        "assignment": [[3,3],[5,5]],
        "assignment:8": [[1,1]],
        "assignment:solve": [[12,12]],
        "assignment_lhs_identifier:BOARD_SIZE": [[1,1]],
        "assignment_lhs_identifier:left": [[3,3],[5,5]],
        "assignment_lhs_identifier:right": [[3,3],[5,5]],
        "assignment_lhs_identifier:smaller_solutions": [[12,12]],
        "assignment_rhs_atom:1": [[5,5],[5,5],[12,12]],
        "assignment_rhs_atom:8": [[1,1]],
        "assignment_rhs_atom:col": [[3,3]],
        "assignment_rhs_atom:left": [[5,5]],
        "assignment_rhs_atom:n": [[12,12]],
        "assignment_rhs_atom:right": [[5,5]],
        "binary_operator:Add": [[5,5],[14,14],[14,14],[17,17]],
        "binary_operator:Sub": [[5,5],[12,12]],
        "body_recursive_function:solve": [[9,17]],
        "chained_assignment": [[3,3]],
        "comparison_operator:Eq": [[10,10]],
        "comparison_operator:In": [[6,6]],
        "comprehension:List": [[13,13]],
        "comprehension_for_count:2": [[13,13]],
        "concatenation_operator:List": [[14,14]],
        "empty_literal:List": [[11,11]],
        "existential_quantification:c": [[4,7]],
        "external_free_call:print": [[20,20]],
        "external_free_call:range": [[15,15]],
        "external_free_call:reversed": [[4,4]],
        "filtered_comprehension": [[17,17]],
        "for:answer": [[19,20]],
        "for:c": [[4,7]],
        "for:r": [[4,7]],
        "free_call:print": [[20,20]],
        "free_call:range": [[15,15]],
        "free_call:reversed": [[4,4]],
        "free_call:solve": [[12,12],[19,19]],
        "free_call:under_attack": [[17,17]],
        "free_call_without_result:print": [[20,20]],
        "function:solve": [[9,17]],
        "function:under_attack": [[2,8]],
        "function_line_count:7": [[2,8]],
        "function_line_count:9": [[9,17]],
        "function_parameter:col": [[2,2]],
        "function_parameter:n": [[9,9]],
        "function_parameter:queens": [[2,2]],
        "function_parameter_flavor:arg": [[2,2],[2,2],[9,9]],
        "function_returning_something:solve": [[9,17]],
        "function_returning_something:under_attack": [[2,8]],
        "global_scope:BOARD_SIZE": [[1,20]],
        "global_scope:answer": [[1,20]],
        "if": [[6,7],[10,11]],
        "if_guard": [[10,11]],
        "if_test_atom:0": [[10,10]],
        "if_test_atom:c": [[6,6]],
        "if_test_atom:col": [[6,6]],
        "if_test_atom:left": [[6,6]],
        "if_test_atom:n": [[10,10]],
        "if_test_atom:right": [[6,6]],
        "if_then_branch": [[7,7],[11,11]],
        "if_without_else": [[6,7],[10,11]],
        "impure_function:solve": [[9,17]],
        "impure_function:under_attack": [[2,8]],
        "internal_free_call:solve": [[12,12],[19,19]],
        "internal_free_call:under_attack": [[17,17]],
        "iteration_variable:answer": [[19,19]],
        "iteration_variable:c": [[4,4]],
        "iteration_variable:i": [[15,15]],
        "iteration_variable:r": [[4,4]],
        "iteration_variable:solution": [[16,16]],
        "literal:0": [[10,10]],
        "literal:1": [[5,5],[5,5],[12,12],[14,14],[17,17]],
        "literal:8": [[1,1]],
        "literal:False": [[8,8]],
        "literal:List": [[11,11],[11,11],[14,14]],
        "literal:True": [[7,7]],
        "literal:Tuple": [[4,4],[5,5],[5,5],[6,6],[14,14]],
        "loaded_variable:BOARD_SIZE": [[15,15],[19,19]],
        "loaded_variable:answer": [[20,20]],
        "loaded_variable:c": [[6,6]],
        "loaded_variable:col": [[3,3],[6,6]],
        "loaded_variable:i": [[14,14],[17,17]],
        "loaded_variable:left": [[5,5],[6,6]],
        "loaded_variable:n": [[10,10],[12,12],[14,14]],
        "loaded_variable:queens": [[4,4]],
        "loaded_variable:right": [[5,5],[6,6]],
        "loaded_variable:smaller_solutions": [[16,16]],
        "loaded_variable:solution": [[14,14],[17,17]],
        "local_scope:c": [[2,8]],
        "local_scope:col": [[2,8]],
        "local_scope:i": [[13,13]],
        "local_scope:left": [[2,8]],
        "local_scope:n": [[9,17]],
        "local_scope:queens": [[2,8]],
        "local_scope:r": [[2,8]],
        "local_scope:right": [[2,8]],
        "local_scope:smaller_solutions": [[9,17]],
        "local_scope:solution": [[13,13]],
        "loop:for": [[4,7],[19,20]],
        "loop_with_early_exit:for:return": [[4,7]],
        "loop_with_late_exit:for": [[19,20]],
        "loop_with_return:for": [[4,7]],
        "node:Assign": [[1,1],[3,3],[5,5],[12,12]],
        "node:BinOp": [[5,5],[5,5],[12,12],[14,14],[14,14],[17,17]],
        "node:Call": [[4,4],[12,12],[15,15],[17,17],[19,19],[20,20]],
        "node:Compare": [[6,6],[10,10]],
        "node:Expr": [[20,20]],
        "node:For": [[4,7],[19,20]],
        "node:FunctionDef": [[2,8],[9,17]],
        "node:If": [[6,7],[10,11]],
        "node:List": [[11,11],[11,11],[14,14]],
        "node:ListComp": [[13,17]],
        "node:Name": [[1,1],[3,3],[3,3],[3,3],[4,4],[4,4],[4,4],[4,4],[5,5],[5,5],[5,5],[5,5],[6,6],[6,6],[6,6],[6,6],[10,10],[12,12],[12,12],[12,12],[14,14],[14,14],[14,14],[15,15],[15,15],[15,15],[16,16],[16,16],[17,17],[17,17],[17,17],[19,19],[19,19],[19,19],[20,20],[20,20]],
        "node:NameConstant": [[7,7],[8,8]],
        "node:Num": [[1,1],[5,5],[5,5],[10,10],[12,12],[14,14],[17,17]],
        "node:Return": [[7,7],[8,8],[11,11],[13,17]],
        "node:Tuple": [[4,4],[5,5],[5,5],[6,6],[14,14]],
        "node:UnaryOp": [[17,17]],
        "node:arg": [[2,2],[2,2],[9,9]],
        "parallel_assignment:2": [[5,5]],
        "procedural_style": [[1,20]],
        "range:BOARD_SIZE": [[15,15]],
        "recursive_call_count:1": [[9,17]],
        "recursive_function:solve": [[9,17]],
        "return": [[11,11],[13,17]],
        "return:False": [[8,8]],
        "return:True": [[7,7]],
        "scope:BOARD_SIZE": [[1,20]],
        "scope:answer": [[1,20]],
        "scope:c": [[2,8]],
        "scope:col": [[2,8]],
        "scope:i": [[13,13]],
        "scope:left": [[2,8]],
        "scope:n": [[9,17]],
        "scope:queens": [[2,8]],
        "scope:r": [[2,8]],
        "scope:right": [[2,8]],
        "scope:smaller_solutions": [[9,17]],
        "scope:solution": [[13,13]],
        "single_assignment:BOARD_SIZE": [[1,1]],
        "single_assignment:smaller_solutions": [[12,12]],
        "unary_operator:Not": [[17,17]],
        "update:left:1": [[5,5]],
        "update:left:right": [[5,5]],
        "update:right:1": [[5,5]],
        "update:right:left": [[5,5]],
        "update_by_assignment:left:1": [[5,5]],
        "update_by_assignment:left:right": [[5,5]],
        "update_by_assignment:right:1": [[5,5]],
        "update_by_assignment:right:left": [[5,5]],
        "update_by_assignment_with": [[5,5]],
        "update_with": [[5,5]],
        "variety:5": [[1,20]],
        "whole_span:20": [[1,20]]
      },
      "taxa": {
        "call/subroutine": [[12,12],[17,17],[19,19]],
        "call/subroutine/builtin/print": [[20,20]],
        "call/subroutine/builtin/range": [[15,15]],
        "call/subroutine/builtin/reversed": [[4,4]],
        "condition/belonging": [[6,6]],
        "condition/equality": [[10,10]],
        "def/subroutine/function/impure": [[2,8],[9,17]],
        "def/subroutine/parameter/arg": [[2,2],[2,2],[9,9]],
        "def/subroutine/recursive/body": [[9,17]],
        "def/subroutine/recursive/call_count/1": [[9,17]],
        "def/subroutine/return/something": [[11,11],[13,17]],
        "flow/conditional/guard": [[10,11]],
        "flow/conditional/no_else": [[6,7],[10,11]],
        "flow/loop/exit/early/return": [[4,7]],
        "flow/loop/exit/late": [[19,20]],
        "flow/loop/for": [[4,7],[19,20]],
        "meta/count/program/sloc/20": [[1,20]],
        "meta/count/subroutine/sloc/7": [[2,8]],
        "meta/count/subroutine/sloc/9": [[9,17]],
        "meta/count/variety/5": [[1,20]],
        "meta/program": [[1,20]],
        "operator/arithmetic/addition": [[5,5],[17,17]],
        "operator/arithmetic/substraction": [[5,5],[12,12]],
        "operator/boolean/not": [[17,17]],
        "operator/list/concatenation": [[14,14]],
        "pattern/elements/satisfy/some": [[4,7]],
        "style/procedural": [[1,20]],
        "type/boolean/literal/False": [[8,8]],
        "type/boolean/literal/True": [[7,7]],
        "type/number/integer/literal": [[1,1],[5,5],[5,5],[12,12],[14,14],[17,17]],
        "type/number/integer/literal/zero": [[10,10]],
        "type/sequence/list/comprehension": [[13,13]],
        "type/sequence/list/literal": [[11,11],[14,14]],
        "type/sequence/list/literal/empty": [[11,11]],
        "type/sequence/tuple/literal": [[4,4],[5,5],[5,5],[6,6],[14,14]],
        "var/assignment/explicit/chained": [[3,3]],
        "var/assignment/explicit/constant": [[1,1]],
        "var/assignment/explicit/parallel": [[5,5]],
        "var/assignment/explicit/single": [[1,1],[12,12]],
        "var/assignment/implicit/iteration_variable": [[4,4],[4,4],[15,15],[16,16],[19,19]],
        "var/assignment/implicit/parameter": [[2,2],[2,2],[9,9]],
        "var/scope/global": [[1,20]],
        "var/scope/local": [[2,8],[9,17],[13,13]],
        "var/scope/outer/constant": [[9,17]]
      }
    },
    "20_prime_numbers.py": {
      "timestamp": "",
      "source": "import itertools\ndef iter_primes():\n    numbers = itertools.count(2)\n    while True:\n        prime = next(numbers)\n        yield prime\n        numbers = filter(prime.__rmod__, numbers)\nfor p in iter_primes():\n    if p > 1000:\n        break\n    print(p)",
      "labels": {
        "argument:": [[7,7]],
        "argument:2": [[3,3]],
        "argument:numbers": [[5,5],[7,7]],
        "argument:p": [[11,11]],
        "assignment:count": [[3,3]],
        "assignment:filter": [[7,7]],
        "assignment:next": [[5,5]],
        "assignment_lhs_identifier:numbers": [[3,3],[7,7]],
        "assignment_lhs_identifier:prime": [[5,5]],
        "assignment_rhs_atom:2": [[3,3]],
        "assignment_rhs_atom:itertools": [[3,3]],
        "assignment_rhs_atom:numbers": [[5,5],[7,7]],
        "assignment_rhs_atom:prime": [[7,7]],
        "comparison_operator:Gt": [[9,9]],
        "external_free_call:filter": [[7,7]],
        "external_free_call:next": [[5,5]],
        "external_free_call:print": [[11,11]],
        "for:p": [[8,11]],
        "free_call:filter": [[7,7]],
        "free_call:iter_primes": [[8,8]],
        "free_call:next": [[5,5]],
        "free_call:print": [[11,11]],
        "free_call_no_arguments:iter_primes": [[8,8]],
        "free_call_without_result:print": [[11,11]],
        "function:iter_primes": [[2,7]],
        "function_line_count:6": [[2,7]],
        "function_without_parameters:iter_primes": [[2,7]],
        "generator:iter_primes": [[2,7]],
        "global_scope:p": [[1,11]],
        "if": [[9,10]],
        "if_test_atom:1000": [[9,9]],
        "if_test_atom:p": [[9,9]],
        "if_then_branch": [[10,10]],
        "if_without_else": [[9,10]],
        "import:itertools": [[1,1]],
        "import_module:itertools": [[1,1]],
        "infinite_while": [[4,7]],
        "internal_free_call:iter_primes": [[8,8]],
        "iteration_variable:p": [[8,8]],
        "literal:1000": [[9,9]],
        "literal:2": [[3,3]],
        "literal:True": [[4,4]],
        "loaded_variable:itertools": [[3,3]],
        "loaded_variable:numbers": [[5,5],[7,7]],
        "loaded_variable:p": [[9,9],[11,11]],
        "loaded_variable:prime": [[6,6],[7,7]],
        "local_scope:numbers": [[2,7]],
        "local_scope:prime": [[2,7]],
        "loop:for": [[8,11]],
        "loop:while": [[4,7]],
        "loop_with_break:for": [[8,11]],
        "loop_with_early_exit:for:break": [[8,11]],
        "loop_with_late_exit:while": [[4,7]],
        "magic_number:1000": [[9,9]],
        "member_call_method:count": [[3,3]],
        "node:Assign": [[3,3],[5,5],[7,7]],
        "node:Attribute": [[3,3],[7,7]],
        "node:Break": [[10,10]],
        "node:Call": [[3,3],[5,5],[7,7],[8,8],[11,11]],
        "node:Compare": [[9,9]],
        "node:Expr": [[6,6],[11,11]],
        "node:For": [[8,11]],
        "node:FunctionDef": [[2,7]],
        "node:If": [[9,10]],
        "node:Import": [[1,1]],
        "node:Name": [[3,3],[3,3],[5,5],[5,5],[5,5],[6,6],[7,7],[7,7],[7,7],[7,7],[8,8],[8,8],[9,9],[11,11],[11,11]],
        "node:NameConstant": [[4,4]],
        "node:Num": [[3,3],[9,9]],
        "node:While": [[4,7]],
        "node:Yield": [[6,6]],
        "procedural_style": [[1,11]],
        "scope:numbers": [[2,7]],
        "scope:p": [[1,11]],
        "scope:prime": [[2,7]],
        "single_assignment:numbers": [[3,3],[7,7]],
        "single_assignment:prime": [[5,5]],
        "update:numbers:prime": [[7,7]],
        "update_by_assignment:numbers:prime": [[7,7]],
        "update_by_assignment_with:filter": [[7,7]],
        "update_with:filter": [[7,7]],
        "variety:6": [[1,11]],
        "whole_span:11": [[1,11]],
        "yield:prime": [[6,6]]
      },
      "taxa": {
        "call/subroutine/builtin/filter": [[7,7]],
        "call/subroutine/builtin/next": [[5,5]],
        "call/subroutine/builtin/print": [[11,11]],
        "call/subroutine/method/sequence_duck/count": [[3,3]],
        "call/subroutine/no_arguments": [[8,8]],
        "condition/inequality": [[9,9]],
        "def/subroutine/generator": [[2,7]],
        "def/subroutine/parameter/no": [[2,7]],
        "flow/conditional/no_else": [[9,10]],
        "flow/loop/exit/early/break": [[8,11]],
        "flow/loop/exit/late": [[4,7]],
        "flow/loop/for": [[8,11]],
        "flow/loop/while/infinite": [[4,7]],
        "import/standard/itertools": [[1,1]],
        "meta/count/program/sloc/11": [[1,11]],
        "meta/count/subroutine/sloc/6": [[2,7]],
        "meta/count/variety/6": [[1,11]],
        "meta/program": [[1,11]],
        "style/functional_trait/filter": [[7,7]],
        "style/procedural": [[1,11]],
        "type/boolean/literal/True": [[4,4]],
        "type/number/integer/literal": [[3,3],[9,9]],
        "type/number/magic": [[9,9]],
        "type/sequence": [[3,3]],
        "var/assignment/explicit/single": [[3,3],[5,5],[7,7]],
        "var/assignment/implicit/iteration_variable": [[8,8]],
        "var/scope/global": [[1,11]],
        "var/scope/local": [[2,7]]
      }
    },
    "21_xml_html_parsing.py": {
      "timestamp": "",
      "source": "dinner_recipe = \"\"\"<html><body><table>\n<tr><th>amt</th><th>unit</th><th>item</th></tr>\n<tr><td>24</td><td>slices</td><td>baguette</td></tr>\n<tr><td>2+</td><td>tbsp</td><td>olive oil</td></tr>\n<tr><td>1</td><td>cup</td><td>tomatoes</td></tr>\n<tr><td>1</td><td>jar</td><td>pesto</td></tr>\n</table></body></html>\"\"\"\nimport xml.etree.ElementTree as etree\ntree = etree.fromstring(dinner_recipe)\npantry = {\"olive oil\", \"pesto\"}\nfor ingredient in tree.getiterator(\"tr\"):\n    amt, unit, item = ingredient\n    if item.tag == \"td\" and item.text not in pantry:\n        print(\"{}: {} {}\".format(item.text, amt.text, unit.text))",
      "labels": {
        "argument:": [[11,11],[14,14],[14,14],[14,14],[14,14]],
        "argument:dinner_recipe": [[9,9]],
        "assignment": [[1,1],[10,10],[12,12]],
        "assignment:fromstring": [[9,9]],
        "assignment_lhs_identifier:amt": [[12,12]],
        "assignment_lhs_identifier:dinner_recipe": [[1,1]],
        "assignment_lhs_identifier:item": [[12,12]],
        "assignment_lhs_identifier:pantry": [[10,10]],
        "assignment_lhs_identifier:tree": [[9,9]],
        "assignment_lhs_identifier:unit": [[12,12]],
        "assignment_rhs_atom:dinner_recipe": [[9,9]],
        "assignment_rhs_atom:etree": [[9,9]],
        "assignment_rhs_atom:ingredient": [[12,12]],
        "boolean_operator:And": [[13,13]],
        "comparison_operator:Eq": [[13,13]],
        "comparison_operator:NotIn": [[13,13]],
        "composition": [[14,14]],
        "external_free_call:print": [[14,14]],
        "for:ingredient": [[11,14]],
        "free_call:print": [[14,14]],
        "free_call_without_result:print": [[14,14]],
        "global_scope:amt": [[1,14]],
        "global_scope:dinner_recipe": [[1,14]],
        "global_scope:ingredient": [[1,14]],
        "global_scope:item": [[1,14]],
        "global_scope:pantry": [[1,14]],
        "global_scope:tree": [[1,14]],
        "global_scope:unit": [[1,14]],
        "if": [[13,14]],
        "if_test_atom:item": [[13,13],[13,13]],
        "if_test_atom:pantry": [[13,13]],
        "if_then_branch": [[14,14]],
        "if_without_else": [[13,14]],
        "imperative_style": [[1,14]],
        "import:xml.etree.ElementTree": [[8,8]],
        "import_module:xml.etree.ElementTree": [[8,8]],
        "iteration_variable:ingredient": [[11,11]],
        "literal:Set": [[10,10]],
        "literal:Str": [[1,1],[10,10],[10,10],[11,11],[13,13],[14,14]],
        "literal:Tuple": [[12,12]],
        "loaded_variable:amt": [[14,14]],
        "loaded_variable:dinner_recipe": [[9,9]],
        "loaded_variable:etree": [[9,9]],
        "loaded_variable:ingredient": [[12,12]],
        "loaded_variable:item": [[13,13],[13,13],[14,14]],
        "loaded_variable:pantry": [[13,13]],
        "loaded_variable:tree": [[11,11]],
        "loaded_variable:unit": [[14,14]],
        "loop:for": [[11,14]],
        "loop_with_late_exit:for": [[11,14]],
        "member_call_method:format": [[14,14]],
        "member_call_method:fromstring": [[9,9]],
        "member_call_method:getiterator": [[11,11]],
        "node:Assign": [[1,1],[9,9],[10,10],[12,12]],
        "node:Attribute": [[9,9],[11,11],[13,13],[13,13],[14,14],[14,14],[14,14],[14,14]],
        "node:BoolOp": [[13,13]],
        "node:Call": [[9,9],[11,11],[14,14],[14,14]],
        "node:Compare": [[13,13],[13,13]],
        "node:Expr": [[14,14]],
        "node:For": [[11,14]],
        "node:If": [[13,14]],
        "node:Import": [[8,8]],
        "node:Name": [[1,1],[9,9],[9,9],[9,9],[10,10],[11,11],[11,11],[12,12],[12,12],[12,12],[12,12],[13,13],[13,13],[13,13],[14,14],[14,14],[14,14],[14,14]],
        "node:Set": [[10,10]],
        "node:Str": [[1,1],[10,10],[10,10],[11,11],[13,13],[14,14]],
        "node:Tuple": [[12,12]],
        "parallel_assignment:3": [[12,12]],
        "scope:amt": [[1,14]],
        "scope:dinner_recipe": [[1,14]],
        "scope:ingredient": [[1,14]],
        "scope:item": [[1,14]],
        "scope:pantry": [[1,14]],
        "scope:tree": [[1,14]],
        "scope:unit": [[1,14]],
        "single_assignment:dinner_recipe": [[1,1]],
        "single_assignment:pantry": [[10,10]],
        "single_assignment:tree": [[9,9]],
        "special_literal_string:<html><body><table>\\n<tr><th>amt</th><th>unit</th><th>item</th></tr>\\n<tr><td>24</td><td>slices</td><td>baguette</td></tr>\\n<tr><td>2+</td><td>tbsp</td><td>olive oil</td></tr>\\n<tr><td>1</td><td>cup</td><td>tomatoes</td></tr>\\n<tr><td>1</td><td>jar</td><td>pesto</td></tr>\\n</table></body></html>": [[1,1]],
        "variety:3": [[1,14]],
        "whole_span:14": [[1,14]]
      },
      "taxa": {
        "call/composition": [[14,14]],
        "call/subroutine/builtin/print": [[14,14]],
        "call/subroutine/method": [[9,9],[11,11]],
        "call/subroutine/method/sequence/string/format": [[14,14]],
        "condition/belonging/not": [[13,13]],
        "condition/equality": [[13,13]],
        "flow/conditional/no_else": [[13,14]],
        "flow/loop/exit/late": [[11,14]],
        "flow/loop/for": [[11,14]],
        "import/standard/xml.etree.ElementTree": [[8,8]],
        "meta/count/program/sloc/14": [[1,14]],
        "meta/count/variety/3": [[1,14]],
        "meta/program": [[1,14]],
        "operator/boolean/and": [[13,13]],
        "style/imperative": [[1,14]],
        "type/non_sequence/set/literal": [[10,10]],
        "type/sequence/string": [[14,14]],
        "type/sequence/string/literal": [[10,10],[10,10],[11,11],[13,13],[14,14]],
        "type/sequence/string/literal/special/\\n": [[1,1]],
        "type/sequence/tuple/literal": [[12,12]],
        "var/assignment/explicit/parallel/more_than_two": [[12,12]],
        "var/assignment/explicit/single": [[1,1],[9,9],[10,10]],
        "var/assignment/implicit/iteration_variable": [[11,11]],
        "var/scope/global": [[1,14]]
      }
    },
    "28_queens.py": {
      "timestamp": "",
      "source": "BOARD_SIZE = 8\nclass BailOut(Exception):\n    pass\ndef validate(queens):\n    left = right = col = queens[-1]\n    for r in reversed(queens[:-1]):\n        left, right = left - 1, right + 1\n        if r in (left, col, right):\n            raise BailOut\ndef add_queen(queens):\n    for i in range(BOARD_SIZE):\n        test_queens = queens + [i]\n        try:\n            validate(test_queens)\n            if len(test_queens) == BOARD_SIZE:\n                return test_queens\n            else:\n                return add_queen(test_queens)\n        except BailOut:\n            pass\n    raise BailOut\nqueens = add_queen([])\nprint(queens)\nprint(\"\\n\".join(\". \" * q + \"Q \" + \". \" * (BOARD_SIZE - q - 1) for q in queens))",
      "labels": {
        "access_outer_scope:BOARD_SIZE": [[10,21]],
        "addition_operator": [[7,7]],
        "argument:": [[6,6],[22,22],[24,24],[24,24]],
        "argument:BOARD_SIZE": [[11,11]],
        "argument:queens": [[23,23]],
        "argument:test_queens": [[14,14],[15,15],[18,18]],
        "assignment": [[5,5],[7,7]],
        "assignment:8": [[1,1]],
        "assignment:Add": [[12,12]],
        "assignment:add_queen": [[22,22]],
        "assignment_lhs_identifier:BOARD_SIZE": [[1,1]],
        "assignment_lhs_identifier:col": [[5,5]],
        "assignment_lhs_identifier:left": [[5,5],[7,7]],
        "assignment_lhs_identifier:queens": [[22,22]],
        "assignment_lhs_identifier:right": [[5,5],[7,7]],
        "assignment_lhs_identifier:test_queens": [[12,12]],
        "assignment_rhs_atom:-1": [[5,5]],
        "assignment_rhs_atom:1": [[7,7],[7,7]],
        "assignment_rhs_atom:8": [[1,1]],
        "assignment_rhs_atom:i": [[12,12]],
        "assignment_rhs_atom:left": [[7,7]],
        "assignment_rhs_atom:queens": [[5,5],[12,12]],
        "assignment_rhs_atom:right": [[7,7]],
        "binary_operator:Add": [[7,7],[12,12],[24,24],[24,24]],
        "binary_operator:Mult": [[24,24],[24,24]],
        "binary_operator:Sub": [[7,7],[24,24],[24,24]],
        "chained_assignment": [[5,5]],
        "class:BailOut": [[2,3]],
        "comparison_operator:Eq": [[15,15]],
        "comparison_operator:In": [[8,8]],
        "composition": [[24,24]],
        "comprehension:Generator": [[24,24]],
        "comprehension_for_count:1": [[24,24]],
        "concatenation_operator:List": [[12,12]],
        "concatenation_operator:Str": [[24,24]],
        "empty_literal:List": [[22,22]],
        "except:BailOut": [[19,19]],
        "external_free_call:len": [[15,15]],
        "external_free_call:print": [[23,23],[24,24]],
        "external_free_call:range": [[11,11]],
        "external_free_call:reversed": [[6,6]],
        "for:i": [[11,20]],
        "for:r": [[6,9]],
        "for_range:BOARD_SIZE": [[11,20]],
        "free_call:add_queen": [[18,18],[22,22]],
        "free_call:len": [[15,15]],
        "free_call:print": [[23,23],[24,24]],
        "free_call:range": [[11,11]],
        "free_call:reversed": [[6,6]],
        "free_call:validate": [[14,14]],
        "free_call_without_result:print": [[23,23],[24,24]],
        "free_call_without_result:validate": [[14,14]],
        "free_tail_call:add_queen": [[18,18]],
        "function:add_queen": [[10,21]],
        "function:validate": [[4,9]],
        "function_line_count:12": [[10,21]],
        "function_line_count:6": [[4,9]],
        "function_parameter:queens": [[4,4],[10,10]],
        "function_parameter_flavor:arg": [[4,4],[10,10]],
        "function_returning_nothing:validate": [[4,9]],
        "function_returning_something:add_queen": [[10,21]],
        "global_scope:BOARD_SIZE": [[1,24]],
        "global_scope:queens": [[1,24]],
        "if": [[8,9],[15,18]],
        "if_else_branch": [[18,18]],
        "if_test_atom:BOARD_SIZE": [[15,15]],
        "if_test_atom:col": [[8,8]],
        "if_test_atom:left": [[8,8]],
        "if_test_atom:r": [[8,8]],
        "if_test_atom:right": [[8,8]],
        "if_test_atom:test_queens": [[15,15]],
        "if_then_branch": [[9,9],[16,16]],
        "if_without_else": [[8,9]],
        "impure_function:add_queen": [[10,21]],
        "index:-1": [[5,5]],
        "internal_free_call:add_queen": [[18,18],[22,22]],
        "internal_free_call:validate": [[14,14]],
        "iteration_variable:i": [[11,11]],
        "iteration_variable:q": [[24,24]],
        "iteration_variable:r": [[6,6]],
        "literal:-1": [[5,5],[6,6]],
        "literal:1": [[7,7],[7,7],[24,24]],
        "literal:8": [[1,1]],
        "literal:List": [[12,12],[22,22]],
        "literal:Str": [[24,24],[24,24],[24,24],[24,24]],
        "literal:Tuple": [[7,7],[7,7],[8,8]],
        "loaded_variable:BOARD_SIZE": [[11,11],[15,15],[24,24]],
        "loaded_variable:BailOut": [[9,9],[19,19],[21,21]],
        "loaded_variable:Exception": [[2,2]],
        "loaded_variable:col": [[8,8]],
        "loaded_variable:i": [[12,12]],
        "loaded_variable:left": [[7,7],[8,8]],
        "loaded_variable:q": [[24,24],[24,24]],
        "loaded_variable:queens": [[5,5],[6,6],[12,12],[23,23],[24,24]],
        "loaded_variable:r": [[8,8]],
        "loaded_variable:right": [[7,7],[8,8]],
        "loaded_variable:test_queens": [[14,14],[15,15],[16,16],[18,18]],
        "local_scope:col": [[4,9]],
        "local_scope:i": [[10,21]],
        "local_scope:left": [[4,9]],
        "local_scope:q": [[24,24]],
        "local_scope:queens": [[4,9],[10,21]],
        "local_scope:r": [[4,9]],
        "local_scope:right": [[4,9]],
        "local_scope:test_queens": [[10,21]],
        "loop:for": [[6,9],[11,20]],
        "loop_with_early_exit:for:raise": [[6,9]],
        "loop_with_early_exit:for:return": [[11,20]],
        "loop_with_raise:for": [[6,9]],
        "loop_with_return:for": [[11,20]],
        "member_call_method:join": [[24,24]],
        "negative_index:-1": [[5,5]],
        "no_operation": [[3,3],[20,20]],
        "node:Assign": [[1,1],[5,5],[7,7],[12,12],[22,22]],
        "node:Attribute": [[24,24]],
        "node:BinOp": [[7,7],[7,7],[12,12],[24,24],[24,24],[24,24],[24,24],[24,24],[24,24]],
        "node:Call": [[6,6],[11,11],[14,14],[15,15],[18,18],[22,22],[23,23],[24,24],[24,24]],
        "node:ClassDef": [[2,3]],
        "node:Compare": [[8,8],[15,15]],
        "node:ExceptHandler": [[19,20]],
        "node:Expr": [[14,14],[23,23],[24,24]],
        "node:For": [[6,9],[11,20]],
        "node:FunctionDef": [[4,9],[10,21]],
        "node:GeneratorExp": [[24,24]],
        "node:If": [[8,9],[15,18]],
        "node:List": [[12,12],[22,22]],
        "node:Name": [[1,1],[2,2],[5,5],[5,5],[5,5],[5,5],[6,6],[6,6],[6,6],[7,7],[7,7],[7,7],[7,7],[8,8],[8,8],[8,8],[8,8],[9,9],[11,11],[11,11],[11,11],[12,12],[12,12],[12,12],[14,14],[14,14],[15,15],[15,15],[15,15],[16,16],[18,18],[18,18],[19,19],[21,21],[22,22],[22,22],[23,23],[23,23],[24,24],[24,24],[24,24],[24,24],[24,24],[24,24]],
        "node:Num": [[1,1],[5,5],[6,6],[7,7],[7,7],[24,24]],
        "node:Pass": [[3,3],[20,20]],
        "node:Raise": [[9,9],[21,21]],
        "node:Return": [[16,16],[18,18]],
        "node:Str": [[24,24],[24,24],[24,24],[24,24]],
        "node:Subscript": [[5,5],[6,6]],
        "node:Try": [[13,20]],
        "node:Tuple": [[7,7],[7,7],[8,8]],
        "node:arg": [[4,4],[10,10]],
        "object_oriented_style": [[1,24]],
        "parallel_assignment:2": [[7,7]],
        "raise:BailOut": [[9,9],[21,21]],
        "range:BOARD_SIZE": [[11,11]],
        "recursive_call_count:1": [[10,21]],
        "recursive_function:add_queen": [[10,21]],
        "replication_operator:Str": [[24,24],[24,24]],
        "return": [[18,18]],
        "return:test_queens": [[16,16]],
        "scope:BOARD_SIZE": [[1,24]],
        "scope:col": [[4,9]],
        "scope:i": [[10,21]],
        "scope:left": [[4,9]],
        "scope:q": [[24,24]],
        "scope:queens": [[1,24],[4,9],[10,21]],
        "scope:r": [[4,9]],
        "scope:right": [[4,9]],
        "scope:test_queens": [[10,21]],
        "shadowing_scope:queens": [[4,9],[10,21]],
        "single_assignment:BOARD_SIZE": [[1,1]],
        "single_assignment:queens": [[22,22]],
        "single_assignment:test_queens": [[12,12]],
        "slice::-1:": [[6,6]],
        "slice_lower:": [[6,6]],
        "slice_step:": [[6,6]],
        "slice_upper:-1": [[6,6]],
        "special_literal_string:\\n": [[24,24]],
        "tail_recursive_function:add_queen": [[10,21]],
        "try_except:BailOut": [[13,20]],
        "update:left:1": [[7,7]],
        "update:left:right": [[7,7]],
        "update:right:1": [[7,7]],
        "update:right:left": [[7,7]],
        "update_by_assignment:left:1": [[7,7]],
        "update_by_assignment:left:right": [[7,7]],
        "update_by_assignment:right:1": [[7,7]],
        "update_by_assignment:right:left": [[7,7]],
        "update_by_assignment_with": [[7,7]],
        "update_with": [[7,7]],
        "variety:7": [[1,24]],
        "whole_span:24": [[1,24]]
      },
      "taxa": {
        "call/composition": [[24,24]],
        "call/subroutine": [[14,14],[18,18],[22,22]],
        "call/subroutine/builtin/len": [[15,15]],
        "call/subroutine/builtin/print": [[23,23],[24,24]],
        "call/subroutine/builtin/range": [[11,11]],
        "call/subroutine/builtin/reversed": [[6,6]],
        "call/subroutine/method/sequence/string/join": [[24,24]],
        "condition/belonging": [[8,8]],
        "condition/equality": [[15,15]],
        "def/class": [[2,3]],
        "def/subroutine/function/impure": [[10,21]],
        "def/subroutine/generator/expression": [[24,24]],
        "def/subroutine/parameter/arg": [[4,4],[10,10]],
        "def/subroutine/procedure": [[4,9]],
        "def/subroutine/recursive/call_count/1": [[10,21]],
        "def/subroutine/recursive/tail": [[10,21]],
        "def/subroutine/return/something": [[18,18]],
        "flow/conditional": [[15,18]],
        "flow/conditional/else": [[18,18]],
        "flow/conditional/no_else": [[8,9]],
        "flow/exception/catch/": [[13,20]],
        "flow/loop/exit/early/raise": [[6,9]],
        "flow/loop/exit/early/return": [[11,20]],
        "flow/loop/for": [[6,9]],
        "flow/loop/for/arithmetic": [[11,20]],
        "flow/no_operation": [[3,3],[20,20]],
        "meta/count/program/sloc/24": [[1,24]],
        "meta/count/subroutine/sloc/12": [[10,21]],
        "meta/count/subroutine/sloc/6": [[4,9]],
        "meta/count/variety/7": [[1,24]],
        "meta/program": [[1,24]],
        "operator/arithmetic/addition": [[7,7]],
        "operator/arithmetic/substraction": [[7,7],[24,24],[24,24]],
        "operator/list/concatenation": [[12,12]],
        "operator/string/concatenation": [[24,24]],
        "operator/string/replication": [[24,24],[24,24]],
        "style/object_oriented": [[1,24]],
        "subscript/index": [[5,5]],
        "subscript/index/backwards/last": [[5,5]],
        "subscript/slice/stop": [[6,6]],
        "type/number/integer/literal": [[1,1],[5,5],[6,6],[7,7],[7,7],[24,24]],
        "type/sequence/list/literal": [[12,12]],
        "type/sequence/list/literal/empty": [[22,22]],
        "type/sequence/string": [[24,24]],
        "type/sequence/string/literal": [[24,24],[24,24],[24,24]],
        "type/sequence/string/literal/special/\\n": [[24,24]],
        "type/sequence/tuple/literal": [[7,7],[7,7],[8,8]],
        "var/assignment/explicit/chained": [[5,5]],
        "var/assignment/explicit/constant": [[1,1]],
        "var/assignment/explicit/parallel": [[7,7]],
        "var/assignment/explicit/single": [[1,1],[12,12],[22,22]],
        "var/assignment/implicit/iteration_variable": [[6,6],[11,11],[24,24]],
        "var/assignment/implicit/parameter": [[4,4],[10,10]],
        "var/scope/global": [[1,24]],
        "var/scope/local": [[4,9],[10,21],[24,24]],
        "var/scope/outer/constant": [[10,21]],
        "var/scope/shadowing": [[4,9],[10,21]]
      }
    },
    "33_guess_the_number.py": {
      "timestamp": "",
      "source": "import random\nguesses_made = 0\nname = input(\"Hello! What is your name?\\n\")\nnumber = random.randint(1, 20)\nprint(\"Well, {}, I am thinking of a number between 1 and 20.\".format(name))\nwhile guesses_made < 6:\n    guess = int(input(\"Take a guess: \"))\n    guesses_made += 1\n    if guess < number:\n        print(\"Your guess is too low.\")\n    if guess > number:\n        print(\"Your guess is too high.\")\n    if guess == number:\n        break\nif guess == number:\n    print(\"Good job, {}! You guessed my number in {} guesses!\".format(name, guesses_made))\nelse:\n    print(\"Nope. The number I was thinking of was {}\".format(number))",
      "labels": {
        "argument:": [[3,3],[5,5],[7,7],[7,7],[10,10],[12,12],[16,16],[18,18]],
        "argument:1": [[4,4]],
        "argument:20": [[4,4]],
        "argument:guesses_made": [[16,16]],
        "argument:name": [[5,5],[16,16]],
        "argument:number": [[18,18]],
        "assignment:0": [[2,2]],
        "assignment:input": [[3,3]],
        "assignment:int": [[7,7]],
        "assignment:randint": [[4,4]],
        "assignment_lhs_identifier:guess": [[7,7]],
        "assignment_lhs_identifier:guesses_made": [[2,2],[8,8]],
        "assignment_lhs_identifier:name": [[3,3]],
        "assignment_lhs_identifier:number": [[4,4]],
        "assignment_rhs_atom:0": [[2,2]],
        "assignment_rhs_atom:1": [[4,4],[8,8]],
        "assignment_rhs_atom:20": [[4,4]],
        "assignment_rhs_atom:random": [[4,4]],
        "augmented_assignment:Add": [[8,8]],
        "comparison_operator:Eq": [[13,13],[15,15]],
        "comparison_operator:Gt": [[11,11]],
        "comparison_operator:Lt": [[6,6],[9,9]],
        "composition": [[5,5],[7,7],[16,16],[18,18]],
        "count_states:guesses_made": [[6,14]],
        "external_free_call:input": [[3,3],[7,7]],
        "external_free_call:int": [[7,7]],
        "external_free_call:print": [[5,5],[10,10],[12,12],[16,16],[18,18]],
        "free_call:input": [[3,3],[7,7]],
        "free_call:int": [[7,7]],
        "free_call:print": [[5,5],[10,10],[12,12],[16,16],[18,18]],
        "free_call_without_result:print": [[5,5],[10,10],[12,12],[16,16],[18,18]],
        "global_scope:guess": [[1,18]],
        "global_scope:guesses_made": [[1,18]],
        "global_scope:name": [[1,18]],
        "global_scope:number": [[1,18]],
        "if": [[9,10],[11,12],[13,14],[15,18]],
        "if_else_branch": [[18,18]],
        "if_test_atom:guess": [[9,9],[11,11],[13,13],[15,15]],
        "if_test_atom:number": [[9,9],[11,11],[13,13],[15,15]],
        "if_then_branch": [[10,10],[12,12],[14,14],[16,16]],
        "if_without_else": [[9,10],[11,12],[13,14]],
        "imperative_style": [[1,18]],
        "import:random": [[1,1]],
        "import_module:random": [[1,1]],
        "increment:guesses_made": [[8,8]],
        "literal:0": [[2,2]],
        "literal:1": [[4,4],[8,8]],
        "literal:20": [[4,4]],
        "literal:6": [[6,6]],
        "literal:Str": [[3,3],[5,5],[7,7],[10,10],[12,12],[16,16],[18,18]],
        "loaded_variable:guess": [[9,9],[11,11],[13,13],[15,15]],
        "loaded_variable:guesses_made": [[6,6],[16,16]],
        "loaded_variable:name": [[5,5],[16,16]],
        "loaded_variable:number": [[9,9],[11,11],[13,13],[15,15],[18,18]],
        "loaded_variable:random": [[4,4]],
        "loop:while": [[6,14]],
        "loop_with_break:while": [[6,14]],
        "loop_with_early_exit:while:break": [[6,14]],
        "magic_number:20": [[4,4]],
        "magic_number:6": [[6,6]],
        "member_call_method:format": [[5,5],[16,16],[18,18]],
        "member_call_method:randint": [[4,4]],
        "node:Assign": [[2,2],[3,3],[4,4],[7,7]],
        "node:Attribute": [[4,4],[5,5],[16,16],[18,18]],
        "node:AugAssign": [[8,8]],
        "node:Break": [[14,14]],
        "node:Call": [[3,3],[4,4],[5,5],[5,5],[7,7],[7,7],[10,10],[12,12],[16,16],[16,16],[18,18],[18,18]],
        "node:Compare": [[6,6],[9,9],[11,11],[13,13],[15,15]],
        "node:Expr": [[5,5],[10,10],[12,12],[16,16],[18,18]],
        "node:If": [[9,10],[11,12],[13,14],[15,18]],
        "node:Import": [[1,1]],
        "node:Name": [[2,2],[3,3],[3,3],[4,4],[4,4],[5,5],[5,5],[6,6],[7,7],[7,7],[7,7],[8,8],[9,9],[9,9],[10,10],[11,11],[11,11],[12,12],[13,13],[13,13],[15,15],[15,15],[16,16],[16,16],[16,16],[18,18],[18,18]],
        "node:Num": [[2,2],[4,4],[4,4],[6,6],[8,8]],
        "node:Str": [[3,3],[5,5],[7,7],[10,10],[12,12],[16,16],[18,18]],
        "node:While": [[6,14]],
        "scope:guess": [[1,18]],
        "scope:guesses_made": [[1,18]],
        "scope:name": [[1,18]],
        "scope:number": [[1,18]],
        "single_assignment:guess": [[7,7]],
        "single_assignment:guesses_made": [[2,2]],
        "single_assignment:name": [[3,3]],
        "single_assignment:number": [[4,4]],
        "special_literal_string:Hello! What is your name?\\n": [[3,3]],
        "update:guesses_made:1": [[8,8]],
        "update_by_augmented_assignment:guesses_made:1": [[8,8]],
        "update_by_augmented_assignment_with:Add": [[8,8]],
        "update_with:Add": [[8,8]],
        "variety:4": [[1,18]],
        "whole_span:18": [[1,18]]
      },
      "taxa": {
        "call/composition": [[5,5],[7,7],[16,16],[18,18]],
        "call/subroutine/builtin/casting/int": [[7,7]],
        "call/subroutine/builtin/input": [[3,3],[7,7]],
        "call/subroutine/builtin/print": [[5,5],[10,10],[12,12],[16,16],[18,18]],
        "call/subroutine/method": [[4,4]],
        "call/subroutine/method/sequence/string/format": [[5,5],[16,16],[18,18]],
        "condition/equality": [[13,13],[15,15]],
        "condition/inequality": [[6,6],[9,9],[11,11]],
        "flow/conditional": [[15,18]],
        "flow/conditional/else": [[18,18]],
        "flow/conditional/no_else": [[9,10],[11,12],[13,14]],
        "flow/loop/exit/early/break": [[6,14]],
        "flow/loop/while": [[6,14]],
        "import/standard/random": [[1,1]],
        "meta/count/program/sloc/18": [[1,18]],
        "meta/count/variety/4": [[1,18]],
        "meta/program": [[1,18]],
        "pattern/states/accumulate/count": [[6,14]],
        "style/imperative": [[1,18]],
        "type/number/integer": [[7,7]],
        "type/number/integer/literal": [[4,4],[4,4],[6,6],[8,8]],
        "type/number/integer/literal/zero": [[2,2]],
        "type/number/magic": [[4,4],[6,6]],
        "type/sequence/string": [[5,5],[16,16],[18,18]],
        "type/sequence/string/literal": [[5,5],[7,7],[10,10],[12,12],[16,16],[18,18]],
        "type/sequence/string/literal/special/\\n": [[3,3]],
        "var/assignment/explicit/augmented/Add": [[8,8]],
        "var/assignment/explicit/single": [[2,2],[3,3],[4,4],[7,7]],
        "var/scope/global": [[1,18]]
      }
    }
  },
  "labels": {
    "access_outer_scope:BOARD_SIZE": [
      "18_queens.py",
      "28_queens.py"
    ],
    "addition_operator": [
      "04_fibonacci.py",
      "13_unit_testing.py",
      "14_median.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "argument:": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "argument:0.0": [
      "16_csv.py"
    ],
    "argument:1": [
      "33_guess_the_number.py"
    ],
    "argument:15": [
      "12_classes.py"
    ],
    "argument:2": [
      "20_prime_numbers.py"
    ],
    "argument:20": [
      "33_guess_the_number.py"
    ],
    "argument:50": [
      "12_classes.py"
    ],
    "argument:7": [
      "13_unit_testing.py"
    ],
    "argument:BOARD_SIZE": [
      "18_queens.py",
      "28_queens.py"
    ],
    "argument:answer": [
      "18_queens.py"
    ],
    "argument:arg": [
      "08_arguments.py"
    ],
    "argument:babies": [
      "04_fibonacci.py"
    ],
    "argument:bool": [
      "15_itertools_groupby.py"
    ],
    "argument:change": [
      "16_csv.py"
    ],
    "argument:copy": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "argument:dinner_recipe": [
      "21_xml_html_parsing.py"
    ],
    "argument:file_name": [
      "09_indent.py"
    ],
    "argument:frags": [
      "15_itertools_groupby.py"
    ],
    "argument:friends": [
      "03_friends.py"
    ],
    "argument:guesses_made": [
      "33_guess_the_number.py"
    ],
    "argument:i": [
      "03_friends.py"
    ],
    "argument:lines": [
      "15_itertools_groupby.py"
    ],
    "argument:name": [
      "03_friends.py",
      "05_greet.py",
      "16_csv.py",
      "33_guess_the_number.py"
    ],
    "argument:number": [
      "33_guess_the_number.py"
    ],
    "argument:numbers": [
      "20_prime_numbers.py"
    ],
    "argument:p": [
      "20_prime_numbers.py"
    ],
    "argument:pct": [
      "16_csv.py"
    ],
    "argument:pool": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "argument:python_files": [
      "09_indent.py"
    ],
    "argument:queens": [
      "18_queens.py",
      "28_queens.py"
    ],
    "argument:solution": [
      "18_queens.py"
    ],
    "argument:status": [
      "16_csv.py"
    ],
    "argument:stocksFile": [
      "16_csv.py"
    ],
    "argument:stocksFileW": [
      "16_csv.py"
    ],
    "argument:test_queens": [
      "28_queens.py"
    ],
    "argument:test_string": [
      "06_regex.py"
    ],
    "argument:total": [
      "08_arguments.py"
    ],
    "assignment": [
      "03_friends.py",
      "04_fibonacci.py",
      "07_grocery_bill.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "16_csv.py",
      "18_queens.py",
      "21_xml_html_parsing.py",
      "28_queens.py"
    ],
    "assignment:0": [
      "33_guess_the_number.py"
    ],
    "assignment:8": [
      "18_queens.py",
      "28_queens.py"
    ],
    "assignment:9": [
      "11_bottles.py"
    ],
    "assignment:Add": [
      "28_queens.py"
    ],
    "assignment:BankAccount": [
      "12_classes.py"
    ],
    "assignment:add_queen": [
      "28_queens.py"
    ],
    "assignment:count": [
      "20_prime_numbers.py"
    ],
    "assignment:filter": [
      "20_prime_numbers.py"
    ],
    "assignment:fromstring": [
      "21_xml_html_parsing.py"
    ],
    "assignment:glob": [
      "09_indent.py"
    ],
    "assignment:input": [
      "02_input_name.py",
      "33_guess_the_number.py"
    ],
    "assignment:int": [
      "33_guess_the_number.py"
    ],
    "assignment:len": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "assignment:localtime": [
      "10_time.py"
    ],
    "assignment:next": [
      "20_prime_numbers.py"
    ],
    "assignment:randint": [
      "33_guess_the_number.py"
    ],
    "assignment:reader": [
      "16_csv.py"
    ],
    "assignment:solve": [
      "18_queens.py"
    ],
    "assignment:sorted": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "assignment:splitlines": [
      "15_itertools_groupby.py"
    ],
    "assignment:sum": [
      "07_grocery_bill.py",
      "08_arguments.py"
    ],
    "assignment:writer": [
      "16_csv.py"
    ],
    "assignment_lhs_identifier:BOARD_SIZE": [
      "18_queens.py",
      "28_queens.py"
    ],
    "assignment_lhs_identifier:REFRAIN": [
      "11_bottles.py"
    ],
    "assignment_lhs_identifier:activities": [
      "10_time.py"
    ],
    "assignment_lhs_identifier:amt": [
      "21_xml_html_parsing.py"
    ],
    "assignment_lhs_identifier:babies": [
      "04_fibonacci.py"
    ],
    "assignment_lhs_identifier:bottles_of_beer": [
      "11_bottles.py"
    ],
    "assignment_lhs_identifier:col": [
      "28_queens.py"
    ],
    "assignment_lhs_identifier:copy": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "assignment_lhs_identifier:dinner_recipe": [
      "21_xml_html_parsing.py"
    ],
    "assignment_lhs_identifier:friends": [
      "03_friends.py"
    ],
    "assignment_lhs_identifier:grocery_bill": [
      "07_grocery_bill.py"
    ],
    "assignment_lhs_identifier:guess": [
      "33_guess_the_number.py"
    ],
    "assignment_lhs_identifier:guesses_made": [
      "33_guess_the_number.py"
    ],
    "assignment_lhs_identifier:hour": [
      "10_time.py"
    ],
    "assignment_lhs_identifier:item": [
      "21_xml_html_parsing.py"
    ],
    "assignment_lhs_identifier:left": [
      "18_queens.py",
      "28_queens.py"
    ],
    "assignment_lhs_identifier:lines": [
      "15_itertools_groupby.py"
    ],
    "assignment_lhs_identifier:my_account": [
      "12_classes.py"
    ],
    "assignment_lhs_identifier:my_purchase": [
      "07_grocery_bill.py"
    ],
    "assignment_lhs_identifier:name": [
      "02_input_name.py",
      "33_guess_the_number.py"
    ],
    "assignment_lhs_identifier:number": [
      "33_guess_the_number.py"
    ],
    "assignment_lhs_identifier:numbers": [
      "20_prime_numbers.py"
    ],
    "assignment_lhs_identifier:pantry": [
      "21_xml_html_parsing.py"
    ],
    "assignment_lhs_identifier:parents": [
      "04_fibonacci.py"
    ],
    "assignment_lhs_identifier:prices": [
      "07_grocery_bill.py"
    ],
    "assignment_lhs_identifier:prime": [
      "20_prime_numbers.py"
    ],
    "assignment_lhs_identifier:python_files": [
      "09_indent.py"
    ],
    "assignment_lhs_identifier:queens": [
      "28_queens.py"
    ],
    "assignment_lhs_identifier:right": [
      "18_queens.py",
      "28_queens.py"
    ],
    "assignment_lhs_identifier:self": [
      "12_classes.py"
    ],
    "assignment_lhs_identifier:size": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "assignment_lhs_identifier:smaller_solutions": [
      "18_queens.py"
    ],
    "assignment_lhs_identifier:status": [
      "16_csv.py"
    ],
    "assignment_lhs_identifier:status_labels": [
      "16_csv.py"
    ],
    "assignment_lhs_identifier:stocks": [
      "16_csv.py"
    ],
    "assignment_lhs_identifier:test_queens": [
      "28_queens.py"
    ],
    "assignment_lhs_identifier:time_now": [
      "10_time.py"
    ],
    "assignment_lhs_identifier:total": [
      "08_arguments.py"
    ],
    "assignment_lhs_identifier:tree": [
      "21_xml_html_parsing.py"
    ],
    "assignment_lhs_identifier:unit": [
      "21_xml_html_parsing.py"
    ],
    "assignment_lhs_identifier:writer": [
      "16_csv.py"
    ],
    "assignment_rhs_atom:-1": [
      "16_csv.py",
      "28_queens.py"
    ],
    "assignment_rhs_atom:0": [
      "16_csv.py",
      "33_guess_the_number.py"
    ],
    "assignment_rhs_atom:0.0": [
      "16_csv.py"
    ],
    "assignment_rhs_atom:0.4": [
      "07_grocery_bill.py"
    ],
    "assignment_rhs_atom:0.5": [
      "07_grocery_bill.py"
    ],
    "assignment_rhs_atom:1": [
      "04_fibonacci.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "11_bottles.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "assignment_rhs_atom:15": [
      "12_classes.py"
    ],
    "assignment_rhs_atom:17": [
      "10_time.py"
    ],
    "assignment_rhs_atom:18": [
      "10_time.py"
    ],
    "assignment_rhs_atom:2": [
      "20_prime_numbers.py"
    ],
    "assignment_rhs_atom:20": [
      "10_time.py",
      "33_guess_the_number.py"
    ],
    "assignment_rhs_atom:22": [
      "10_time.py"
    ],
    "assignment_rhs_atom:6": [
      "07_grocery_bill.py"
    ],
    "assignment_rhs_atom:8": [
      "10_time.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "assignment_rhs_atom:9": [
      "10_time.py",
      "11_bottles.py"
    ],
    "assignment_rhs_atom:amount": [
      "12_classes.py"
    ],
    "assignment_rhs_atom:arg": [
      "08_arguments.py"
    ],
    "assignment_rhs_atom:babies": [
      "04_fibonacci.py"
    ],
    "assignment_rhs_atom:change": [
      "16_csv.py"
    ],
    "assignment_rhs_atom:col": [
      "18_queens.py"
    ],
    "assignment_rhs_atom:copy": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "assignment_rhs_atom:csv": [
      "16_csv.py"
    ],
    "assignment_rhs_atom:dinner_recipe": [
      "21_xml_html_parsing.py"
    ],
    "assignment_rhs_atom:etree": [
      "21_xml_html_parsing.py"
    ],
    "assignment_rhs_atom:fruit": [
      "07_grocery_bill.py"
    ],
    "assignment_rhs_atom:glob": [
      "09_indent.py"
    ],
    "assignment_rhs_atom:i": [
      "28_queens.py"
    ],
    "assignment_rhs_atom:ingredient": [
      "21_xml_html_parsing.py"
    ],
    "assignment_rhs_atom:initial_balance": [
      "12_classes.py"
    ],
    "assignment_rhs_atom:itertools": [
      "20_prime_numbers.py"
    ],
    "assignment_rhs_atom:left": [
      "18_queens.py",
      "28_queens.py"
    ],
    "assignment_rhs_atom:my_purchase": [
      "07_grocery_bill.py"
    ],
    "assignment_rhs_atom:n": [
      "18_queens.py"
    ],
    "assignment_rhs_atom:numbers": [
      "20_prime_numbers.py"
    ],
    "assignment_rhs_atom:parents": [
      "04_fibonacci.py"
    ],
    "assignment_rhs_atom:pool": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "assignment_rhs_atom:prices": [
      "07_grocery_bill.py"
    ],
    "assignment_rhs_atom:prime": [
      "20_prime_numbers.py"
    ],
    "assignment_rhs_atom:queens": [
      "28_queens.py"
    ],
    "assignment_rhs_atom:random": [
      "33_guess_the_number.py"
    ],
    "assignment_rhs_atom:right": [
      "18_queens.py",
      "28_queens.py"
    ],
    "assignment_rhs_atom:status_labels": [
      "16_csv.py"
    ],
    "assignment_rhs_atom:stocksFile": [
      "16_csv.py"
    ],
    "assignment_rhs_atom:stocksFileW": [
      "16_csv.py"
    ],
    "assignment_rhs_atom:sys": [
      "08_arguments.py"
    ],
    "assignment_rhs_atom:time_now": [
      "10_time.py"
    ],
    "augmented_assignment:Add": [
      "12_classes.py",
      "33_guess_the_number.py"
    ],
    "augmented_assignment:Sub": [
      "11_bottles.py",
      "12_classes.py"
    ],
    "binary_operator:Add": [
      "04_fibonacci.py",
      "09_indent.py",
      "13_unit_testing.py",
      "14_median.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "binary_operator:Div": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "binary_operator:Mod": [
      "02_input_name.py",
      "07_grocery_bill.py",
      "11_bottles.py",
      "13_unit_testing.py",
      "14_median.py"
    ],
    "binary_operator:Mult": [
      "07_grocery_bill.py",
      "28_queens.py"
    ],
    "binary_operator:Sub": [
      "11_bottles.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "body_recursive_function:solve": [
      "18_queens.py"
    ],
    "boolean_operator:And": [
      "21_xml_html_parsing.py"
    ],
    "chained_assignment": [
      "18_queens.py",
      "28_queens.py"
    ],
    "class:BailOut": [
      "28_queens.py"
    ],
    "class:BankAccount": [
      "12_classes.py"
    ],
    "class:TestMedian": [
      "13_unit_testing.py"
    ],
    "class_method_count:1": [
      "13_unit_testing.py"
    ],
    "class_method_count:4": [
      "12_classes.py"
    ],
    "comparison_operator:Eq": [
      "13_unit_testing.py",
      "14_median.py",
      "18_queens.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "comparison_operator:Gt": [
      "11_bottles.py",
      "16_csv.py",
      "20_prime_numbers.py",
      "33_guess_the_number.py"
    ],
    "comparison_operator:In": [
      "18_queens.py",
      "28_queens.py"
    ],
    "comparison_operator:Lt": [
      "04_fibonacci.py",
      "10_time.py",
      "12_classes.py",
      "16_csv.py",
      "33_guess_the_number.py"
    ],
    "comparison_operator:NotIn": [
      "21_xml_html_parsing.py"
    ],
    "composition": [
      "03_friends.py",
      "04_fibonacci.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "12_classes.py",
      "13_unit_testing.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "comprehension:Generator": [
      "07_grocery_bill.py",
      "08_arguments.py",
      "28_queens.py"
    ],
    "comprehension:List": [
      "18_queens.py"
    ],
    "comprehension_for_count:1": [
      "07_grocery_bill.py",
      "08_arguments.py",
      "28_queens.py"
    ],
    "comprehension_for_count:2": [
      "18_queens.py"
    ],
    "concatenation_operator:List": [
      "18_queens.py",
      "28_queens.py"
    ],
    "concatenation_operator:Str": [
      "09_indent.py",
      "28_queens.py"
    ],
    "count_states:guesses_made": [
      "33_guess_the_number.py"
    ],
    "divisibility_test:2": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "empty_literal:List": [
      "18_queens.py",
      "28_queens.py"
    ],
    "empty_literal:Str": [
      "16_csv.py"
    ],
    "except:BailOut": [
      "28_queens.py"
    ],
    "except:ValueError": [
      "08_arguments.py"
    ],
    "existential_quantification:c": [
      "18_queens.py"
    ],
    "external_free_call:BankAccount": [
      "12_classes.py"
    ],
    "external_free_call:enumerate": [
      "03_friends.py"
    ],
    "external_free_call:filter": [
      "20_prime_numbers.py"
    ],
    "external_free_call:float": [
      "16_csv.py"
    ],
    "external_free_call:groupby": [
      "15_itertools_groupby.py"
    ],
    "external_free_call:input": [
      "02_input_name.py",
      "33_guess_the_number.py"
    ],
    "external_free_call:int": [
      "08_arguments.py",
      "13_unit_testing.py",
      "14_median.py",
      "33_guess_the_number.py"
    ],
    "external_free_call:len": [
      "13_unit_testing.py",
      "14_median.py",
      "28_queens.py"
    ],
    "external_free_call:localtime": [
      "10_time.py"
    ],
    "external_free_call:next": [
      "20_prime_numbers.py"
    ],
    "external_free_call:open": [
      "09_indent.py",
      "16_csv.py"
    ],
    "external_free_call:print": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "external_free_call:range": [
      "18_queens.py",
      "28_queens.py"
    ],
    "external_free_call:reversed": [
      "18_queens.py",
      "28_queens.py"
    ],
    "external_free_call:sorted": [
      "09_indent.py",
      "10_time.py",
      "13_unit_testing.py",
      "14_median.py"
    ],
    "external_free_call:sum": [
      "07_grocery_bill.py",
      "08_arguments.py"
    ],
    "filtered_comprehension": [
      "18_queens.py"
    ],
    "flat_style": [
      "01_hello_world.py",
      "02_input_name.py",
      "07_grocery_bill.py"
    ],
    "for:activity_time": [
      "10_time.py"
    ],
    "for:answer": [
      "18_queens.py"
    ],
    "for:c": [
      "18_queens.py"
    ],
    "for:change": [
      "16_csv.py"
    ],
    "for:file_name": [
      "09_indent.py"
    ],
    "for:frags": [
      "15_itertools_groupby.py"
    ],
    "for:has_chars": [
      "15_itertools_groupby.py"
    ],
    "for:i": [
      "03_friends.py",
      "28_queens.py"
    ],
    "for:ingredient": [
      "21_xml_html_parsing.py"
    ],
    "for:line": [
      "09_indent.py"
    ],
    "for:name": [
      "03_friends.py",
      "16_csv.py"
    ],
    "for:p": [
      "20_prime_numbers.py"
    ],
    "for:pct": [
      "16_csv.py"
    ],
    "for:price": [
      "16_csv.py"
    ],
    "for:r": [
      "18_queens.py",
      "28_queens.py"
    ],
    "for:test_string": [
      "06_regex.py"
    ],
    "for:ticker": [
      "16_csv.py"
    ],
    "for_each:change": [
      "16_csv.py"
    ],
    "for_each:line": [
      "09_indent.py"
    ],
    "for_each:name": [
      "16_csv.py"
    ],
    "for_each:pct": [
      "16_csv.py"
    ],
    "for_each:price": [
      "16_csv.py"
    ],
    "for_each:ticker": [
      "16_csv.py"
    ],
    "for_indexes_elements:i": [
      "03_friends.py"
    ],
    "for_range:BOARD_SIZE": [
      "28_queens.py"
    ],
    "free_call:BankAccount": [
      "12_classes.py"
    ],
    "free_call:add_queen": [
      "28_queens.py"
    ],
    "free_call:cmp": [
      "16_csv.py"
    ],
    "free_call:enumerate": [
      "03_friends.py"
    ],
    "free_call:filter": [
      "20_prime_numbers.py"
    ],
    "free_call:float": [
      "16_csv.py"
    ],
    "free_call:greet": [
      "05_greet.py"
    ],
    "free_call:groupby": [
      "15_itertools_groupby.py"
    ],
    "free_call:input": [
      "02_input_name.py",
      "33_guess_the_number.py"
    ],
    "free_call:int": [
      "08_arguments.py",
      "13_unit_testing.py",
      "14_median.py",
      "33_guess_the_number.py"
    ],
    "free_call:iter_primes": [
      "20_prime_numbers.py"
    ],
    "free_call:len": [
      "13_unit_testing.py",
      "14_median.py",
      "28_queens.py"
    ],
    "free_call:localtime": [
      "10_time.py"
    ],
    "free_call:median": [
      "13_unit_testing.py"
    ],
    "free_call:next": [
      "20_prime_numbers.py"
    ],
    "free_call:open": [
      "09_indent.py",
      "16_csv.py"
    ],
    "free_call:print": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "free_call:range": [
      "18_queens.py",
      "28_queens.py"
    ],
    "free_call:reversed": [
      "18_queens.py",
      "28_queens.py"
    ],
    "free_call:solve": [
      "18_queens.py"
    ],
    "free_call:sorted": [
      "09_indent.py",
      "10_time.py",
      "13_unit_testing.py",
      "14_median.py"
    ],
    "free_call:sum": [
      "07_grocery_bill.py",
      "08_arguments.py"
    ],
    "free_call:under_attack": [
      "18_queens.py"
    ],
    "free_call:validate": [
      "28_queens.py"
    ],
    "free_call_no_arguments:iter_primes": [
      "20_prime_numbers.py"
    ],
    "free_call_no_arguments:localtime": [
      "10_time.py"
    ],
    "free_call_no_arguments:print": [
      "09_indent.py"
    ],
    "free_call_with_keyword_argument:open:newline": [
      "16_csv.py"
    ],
    "free_call_with_keyword_argument:print:iteration": [
      "03_friends.py"
    ],
    "free_call_with_keyword_argument:print:name": [
      "03_friends.py"
    ],
    "free_call_without_result:greet": [
      "05_greet.py"
    ],
    "free_call_without_result:print": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "free_call_without_result:validate": [
      "28_queens.py"
    ],
    "free_tail_call:add_queen": [
      "28_queens.py"
    ],
    "function:__init__": [
      "12_classes.py"
    ],
    "function:add_queen": [
      "28_queens.py"
    ],
    "function:cmp": [
      "16_csv.py"
    ],
    "function:deposit": [
      "12_classes.py"
    ],
    "function:greet": [
      "05_greet.py"
    ],
    "function:iter_primes": [
      "20_prime_numbers.py"
    ],
    "function:median": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "function:overdrawn": [
      "12_classes.py"
    ],
    "function:solve": [
      "18_queens.py"
    ],
    "function:testMedian": [
      "13_unit_testing.py"
    ],
    "function:under_attack": [
      "18_queens.py"
    ],
    "function:validate": [
      "28_queens.py"
    ],
    "function:withdraw": [
      "12_classes.py"
    ],
    "function_line_count:12": [
      "28_queens.py"
    ],
    "function_line_count:2": [
      "05_greet.py",
      "12_classes.py",
      "13_unit_testing.py",
      "16_csv.py"
    ],
    "function_line_count:6": [
      "20_prime_numbers.py",
      "28_queens.py"
    ],
    "function_line_count:7": [
      "13_unit_testing.py",
      "14_median.py",
      "18_queens.py"
    ],
    "function_line_count:9": [
      "18_queens.py"
    ],
    "function_parameter:a": [
      "16_csv.py"
    ],
    "function_parameter:amount": [
      "12_classes.py"
    ],
    "function_parameter:b": [
      "16_csv.py"
    ],
    "function_parameter:col": [
      "18_queens.py"
    ],
    "function_parameter:initial_balance": [
      "12_classes.py"
    ],
    "function_parameter:n": [
      "18_queens.py"
    ],
    "function_parameter:name": [
      "05_greet.py"
    ],
    "function_parameter:pool": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "function_parameter:queens": [
      "18_queens.py",
      "28_queens.py"
    ],
    "function_parameter:self": [
      "12_classes.py",
      "13_unit_testing.py"
    ],
    "function_parameter_default:Num": [
      "12_classes.py"
    ],
    "function_parameter_flavor:arg": [
      "05_greet.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "function_returning_nothing:__init__": [
      "12_classes.py"
    ],
    "function_returning_nothing:deposit": [
      "12_classes.py"
    ],
    "function_returning_nothing:greet": [
      "05_greet.py"
    ],
    "function_returning_nothing:testMedian": [
      "13_unit_testing.py"
    ],
    "function_returning_nothing:validate": [
      "28_queens.py"
    ],
    "function_returning_nothing:withdraw": [
      "12_classes.py"
    ],
    "function_returning_something:add_queen": [
      "28_queens.py"
    ],
    "function_returning_something:cmp": [
      "16_csv.py"
    ],
    "function_returning_something:median": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "function_returning_something:overdrawn": [
      "12_classes.py"
    ],
    "function_returning_something:solve": [
      "18_queens.py"
    ],
    "function_returning_something:under_attack": [
      "18_queens.py"
    ],
    "function_without_parameters:iter_primes": [
      "20_prime_numbers.py"
    ],
    "generator:iter_primes": [
      "20_prime_numbers.py"
    ],
    "global_scope:BOARD_SIZE": [
      "18_queens.py",
      "28_queens.py"
    ],
    "global_scope:REFRAIN": [
      "11_bottles.py"
    ],
    "global_scope:activities": [
      "10_time.py"
    ],
    "global_scope:activity_time": [
      "10_time.py"
    ],
    "global_scope:amt": [
      "21_xml_html_parsing.py"
    ],
    "global_scope:answer": [
      "18_queens.py"
    ],
    "global_scope:babies": [
      "04_fibonacci.py"
    ],
    "global_scope:bottles_of_beer": [
      "11_bottles.py"
    ],
    "global_scope:change": [
      "16_csv.py"
    ],
    "global_scope:dinner_recipe": [
      "21_xml_html_parsing.py"
    ],
    "global_scope:file_name": [
      "09_indent.py"
    ],
    "global_scope:frags": [
      "15_itertools_groupby.py"
    ],
    "global_scope:friends": [
      "03_friends.py"
    ],
    "global_scope:grocery_bill": [
      "07_grocery_bill.py"
    ],
    "global_scope:guess": [
      "33_guess_the_number.py"
    ],
    "global_scope:guesses_made": [
      "33_guess_the_number.py"
    ],
    "global_scope:has_chars": [
      "15_itertools_groupby.py"
    ],
    "global_scope:hour": [
      "10_time.py"
    ],
    "global_scope:i": [
      "03_friends.py"
    ],
    "global_scope:ingredient": [
      "21_xml_html_parsing.py"
    ],
    "global_scope:item": [
      "21_xml_html_parsing.py"
    ],
    "global_scope:line": [
      "09_indent.py"
    ],
    "global_scope:lines": [
      "15_itertools_groupby.py"
    ],
    "global_scope:my_account": [
      "12_classes.py"
    ],
    "global_scope:my_purchase": [
      "07_grocery_bill.py"
    ],
    "global_scope:name": [
      "02_input_name.py",
      "03_friends.py",
      "16_csv.py",
      "33_guess_the_number.py"
    ],
    "global_scope:number": [
      "33_guess_the_number.py"
    ],
    "global_scope:p": [
      "20_prime_numbers.py"
    ],
    "global_scope:pantry": [
      "21_xml_html_parsing.py"
    ],
    "global_scope:parents": [
      "04_fibonacci.py"
    ],
    "global_scope:pct": [
      "16_csv.py"
    ],
    "global_scope:price": [
      "16_csv.py"
    ],
    "global_scope:prices": [
      "07_grocery_bill.py"
    ],
    "global_scope:python_files": [
      "09_indent.py"
    ],
    "global_scope:queens": [
      "28_queens.py"
    ],
    "global_scope:status": [
      "16_csv.py"
    ],
    "global_scope:status_labels": [
      "16_csv.py"
    ],
    "global_scope:stocks": [
      "16_csv.py"
    ],
    "global_scope:test_string": [
      "06_regex.py"
    ],
    "global_scope:ticker": [
      "16_csv.py"
    ],
    "global_scope:time_now": [
      "10_time.py"
    ],
    "global_scope:total": [
      "08_arguments.py"
    ],
    "global_scope:tree": [
      "21_xml_html_parsing.py"
    ],
    "global_scope:unit": [
      "21_xml_html_parsing.py"
    ],
    "global_scope:writer": [
      "16_csv.py"
    ],
    "if": [
      "06_regex.py",
      "10_time.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "if_else_branch": [
      "06_regex.py",
      "13_unit_testing.py",
      "14_median.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "if_guard": [
      "18_queens.py"
    ],
    "if_test_atom:0": [
      "18_queens.py"
    ],
    "if_test_atom:1": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "if_test_atom:1000": [
      "20_prime_numbers.py"
    ],
    "if_test_atom:2": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "if_test_atom:BOARD_SIZE": [
      "28_queens.py"
    ],
    "if_test_atom:activity_time": [
      "10_time.py"
    ],
    "if_test_atom:c": [
      "18_queens.py"
    ],
    "if_test_atom:col": [
      "18_queens.py",
      "28_queens.py"
    ],
    "if_test_atom:guess": [
      "33_guess_the_number.py"
    ],
    "if_test_atom:hour": [
      "10_time.py"
    ],
    "if_test_atom:item": [
      "21_xml_html_parsing.py"
    ],
    "if_test_atom:left": [
      "18_queens.py",
      "28_queens.py"
    ],
    "if_test_atom:n": [
      "18_queens.py"
    ],
    "if_test_atom:number": [
      "33_guess_the_number.py"
    ],
    "if_test_atom:p": [
      "20_prime_numbers.py"
    ],
    "if_test_atom:pantry": [
      "21_xml_html_parsing.py"
    ],
    "if_test_atom:r": [
      "28_queens.py"
    ],
    "if_test_atom:re": [
      "06_regex.py"
    ],
    "if_test_atom:right": [
      "18_queens.py",
      "28_queens.py"
    ],
    "if_test_atom:size": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "if_test_atom:test_queens": [
      "28_queens.py"
    ],
    "if_test_atom:test_string": [
      "06_regex.py"
    ],
    "if_then_branch": [
      "06_regex.py",
      "10_time.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "if_without_else": [
      "10_time.py",
      "15_itertools_groupby.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "imperative_style": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "21_xml_html_parsing.py",
      "33_guess_the_number.py"
    ],
    "import:csv": [
      "16_csv.py"
    ],
    "import:glob": [
      "09_indent.py"
    ],
    "import:itertools": [
      "20_prime_numbers.py"
    ],
    "import:itertools:groupby": [
      "15_itertools_groupby.py"
    ],
    "import:random": [
      "33_guess_the_number.py"
    ],
    "import:re": [
      "06_regex.py"
    ],
    "import:sys": [
      "08_arguments.py"
    ],
    "import:time:localtime": [
      "10_time.py"
    ],
    "import:unittest": [
      "13_unit_testing.py"
    ],
    "import:xml.etree.ElementTree": [
      "21_xml_html_parsing.py"
    ],
    "import_module:csv": [
      "16_csv.py"
    ],
    "import_module:glob": [
      "09_indent.py"
    ],
    "import_module:itertools": [
      "15_itertools_groupby.py",
      "20_prime_numbers.py"
    ],
    "import_module:random": [
      "33_guess_the_number.py"
    ],
    "import_module:re": [
      "06_regex.py"
    ],
    "import_module:sys": [
      "08_arguments.py"
    ],
    "import_module:time": [
      "10_time.py"
    ],
    "import_module:unittest": [
      "13_unit_testing.py"
    ],
    "import_module:xml.etree.ElementTree": [
      "21_xml_html_parsing.py"
    ],
    "import_name:groupby": [
      "15_itertools_groupby.py"
    ],
    "import_name:localtime": [
      "10_time.py"
    ],
    "impure_function:add_queen": [
      "28_queens.py"
    ],
    "impure_function:median": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "impure_function:solve": [
      "18_queens.py"
    ],
    "impure_function:under_attack": [
      "18_queens.py"
    ],
    "increment:guesses_made": [
      "33_guess_the_number.py"
    ],
    "index:-1": [
      "28_queens.py"
    ],
    "index:_": [
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py"
    ],
    "index:activity_time": [
      "10_time.py"
    ],
    "index:fruit": [
      "07_grocery_bill.py"
    ],
    "infinite_while": [
      "20_prime_numbers.py"
    ],
    "instance_method:__init__": [
      "12_classes.py"
    ],
    "instance_method:deposit": [
      "12_classes.py"
    ],
    "instance_method:overdrawn": [
      "12_classes.py"
    ],
    "instance_method:testMedian": [
      "13_unit_testing.py"
    ],
    "instance_method:withdraw": [
      "12_classes.py"
    ],
    "internal_free_call:add_queen": [
      "28_queens.py"
    ],
    "internal_free_call:cmp": [
      "16_csv.py"
    ],
    "internal_free_call:greet": [
      "05_greet.py"
    ],
    "internal_free_call:iter_primes": [
      "20_prime_numbers.py"
    ],
    "internal_free_call:median": [
      "13_unit_testing.py"
    ],
    "internal_free_call:solve": [
      "18_queens.py"
    ],
    "internal_free_call:under_attack": [
      "18_queens.py"
    ],
    "internal_free_call:validate": [
      "28_queens.py"
    ],
    "iteration_variable:activity_time": [
      "10_time.py"
    ],
    "iteration_variable:answer": [
      "18_queens.py"
    ],
    "iteration_variable:arg": [
      "08_arguments.py"
    ],
    "iteration_variable:c": [
      "18_queens.py"
    ],
    "iteration_variable:change": [
      "16_csv.py"
    ],
    "iteration_variable:file_name": [
      "09_indent.py"
    ],
    "iteration_variable:frags": [
      "15_itertools_groupby.py"
    ],
    "iteration_variable:fruit": [
      "07_grocery_bill.py"
    ],
    "iteration_variable:has_chars": [
      "15_itertools_groupby.py"
    ],
    "iteration_variable:i": [
      "03_friends.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "iteration_variable:ingredient": [
      "21_xml_html_parsing.py"
    ],
    "iteration_variable:line": [
      "09_indent.py"
    ],
    "iteration_variable:name": [
      "03_friends.py",
      "16_csv.py"
    ],
    "iteration_variable:p": [
      "20_prime_numbers.py"
    ],
    "iteration_variable:pct": [
      "16_csv.py"
    ],
    "iteration_variable:price": [
      "16_csv.py"
    ],
    "iteration_variable:q": [
      "28_queens.py"
    ],
    "iteration_variable:r": [
      "18_queens.py",
      "28_queens.py"
    ],
    "iteration_variable:solution": [
      "18_queens.py"
    ],
    "iteration_variable:test_string": [
      "06_regex.py"
    ],
    "iteration_variable:ticker": [
      "16_csv.py"
    ],
    "keyword_argument:iteration": [
      "03_friends.py"
    ],
    "keyword_argument:name": [
      "03_friends.py"
    ],
    "keyword_argument:newline": [
      "16_csv.py"
    ],
    "literal:-0.13": [
      "16_csv.py"
    ],
    "literal:-1": [
      "16_csv.py",
      "28_queens.py"
    ],
    "literal:-1.4901": [
      "16_csv.py"
    ],
    "literal:0": [
      "12_classes.py",
      "16_csv.py",
      "18_queens.py",
      "33_guess_the_number.py"
    ],
    "literal:0.0": [
      "16_csv.py"
    ],
    "literal:0.09": [
      "16_csv.py"
    ],
    "literal:0.33": [
      "16_csv.py"
    ],
    "literal:0.4": [
      "07_grocery_bill.py"
    ],
    "literal:0.47": [
      "16_csv.py"
    ],
    "literal:0.5": [
      "07_grocery_bill.py"
    ],
    "literal:1": [
      "04_fibonacci.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "11_bottles.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "literal:1.22": [
      "16_csv.py"
    ],
    "literal:100": [
      "04_fibonacci.py"
    ],
    "literal:1000": [
      "20_prime_numbers.py"
    ],
    "literal:15": [
      "12_classes.py"
    ],
    "literal:17": [
      "10_time.py"
    ],
    "literal:18": [
      "10_time.py"
    ],
    "literal:2": [
      "13_unit_testing.py",
      "14_median.py",
      "20_prime_numbers.py"
    ],
    "literal:20": [
      "10_time.py",
      "33_guess_the_number.py"
    ],
    "literal:22": [
      "10_time.py"
    ],
    "literal:27.38": [
      "16_csv.py"
    ],
    "literal:4": [
      "13_unit_testing.py"
    ],
    "literal:5": [
      "13_unit_testing.py"
    ],
    "literal:50": [
      "12_classes.py"
    ],
    "literal:505.24": [
      "16_csv.py"
    ],
    "literal:6": [
      "07_grocery_bill.py",
      "33_guess_the_number.py"
    ],
    "literal:7": [
      "13_unit_testing.py"
    ],
    "literal:8": [
      "10_time.py",
      "13_unit_testing.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "literal:8.62": [
      "16_csv.py"
    ],
    "literal:9": [
      "10_time.py",
      "11_bottles.py",
      "13_unit_testing.py"
    ],
    "literal:Dict": [
      "07_grocery_bill.py",
      "10_time.py",
      "16_csv.py"
    ],
    "literal:False": [
      "18_queens.py"
    ],
    "literal:List": [
      "03_friends.py",
      "06_regex.py",
      "13_unit_testing.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "literal:Set": [
      "21_xml_html_parsing.py"
    ],
    "literal:Str": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "literal:True": [
      "18_queens.py",
      "20_prime_numbers.py"
    ],
    "literal:Tuple": [
      "03_friends.py",
      "04_fibonacci.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "21_xml_html_parsing.py",
      "28_queens.py"
    ],
    "loaded_variable:BOARD_SIZE": [
      "18_queens.py",
      "28_queens.py"
    ],
    "loaded_variable:BailOut": [
      "28_queens.py"
    ],
    "loaded_variable:Exception": [
      "28_queens.py"
    ],
    "loaded_variable:REFRAIN": [
      "11_bottles.py"
    ],
    "loaded_variable:ValueError": [
      "08_arguments.py"
    ],
    "loaded_variable:a": [
      "16_csv.py"
    ],
    "loaded_variable:activities": [
      "10_time.py"
    ],
    "loaded_variable:activity_time": [
      "10_time.py"
    ],
    "loaded_variable:amount": [
      "12_classes.py"
    ],
    "loaded_variable:amt": [
      "21_xml_html_parsing.py"
    ],
    "loaded_variable:answer": [
      "18_queens.py"
    ],
    "loaded_variable:arg": [
      "08_arguments.py"
    ],
    "loaded_variable:b": [
      "16_csv.py"
    ],
    "loaded_variable:babies": [
      "04_fibonacci.py"
    ],
    "loaded_variable:bool": [
      "15_itertools_groupby.py"
    ],
    "loaded_variable:bottles_of_beer": [
      "11_bottles.py"
    ],
    "loaded_variable:c": [
      "18_queens.py"
    ],
    "loaded_variable:change": [
      "16_csv.py"
    ],
    "loaded_variable:col": [
      "18_queens.py",
      "28_queens.py"
    ],
    "loaded_variable:copy": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "loaded_variable:csv": [
      "16_csv.py"
    ],
    "loaded_variable:dinner_recipe": [
      "21_xml_html_parsing.py"
    ],
    "loaded_variable:etree": [
      "21_xml_html_parsing.py"
    ],
    "loaded_variable:f": [
      "09_indent.py"
    ],
    "loaded_variable:file_name": [
      "09_indent.py"
    ],
    "loaded_variable:frags": [
      "15_itertools_groupby.py"
    ],
    "loaded_variable:friends": [
      "03_friends.py"
    ],
    "loaded_variable:fruit": [
      "07_grocery_bill.py"
    ],
    "loaded_variable:glob": [
      "09_indent.py"
    ],
    "loaded_variable:grocery_bill": [
      "07_grocery_bill.py"
    ],
    "loaded_variable:guess": [
      "33_guess_the_number.py"
    ],
    "loaded_variable:guesses_made": [
      "33_guess_the_number.py"
    ],
    "loaded_variable:has_chars": [
      "15_itertools_groupby.py"
    ],
    "loaded_variable:hour": [
      "10_time.py"
    ],
    "loaded_variable:i": [
      "03_friends.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "loaded_variable:ingredient": [
      "21_xml_html_parsing.py"
    ],
    "loaded_variable:initial_balance": [
      "12_classes.py"
    ],
    "loaded_variable:item": [
      "21_xml_html_parsing.py"
    ],
    "loaded_variable:itertools": [
      "20_prime_numbers.py"
    ],
    "loaded_variable:left": [
      "18_queens.py",
      "28_queens.py"
    ],
    "loaded_variable:line": [
      "09_indent.py"
    ],
    "loaded_variable:lines": [
      "15_itertools_groupby.py"
    ],
    "loaded_variable:my_account": [
      "12_classes.py"
    ],
    "loaded_variable:my_purchase": [
      "07_grocery_bill.py"
    ],
    "loaded_variable:n": [
      "18_queens.py"
    ],
    "loaded_variable:name": [
      "02_input_name.py",
      "03_friends.py",
      "05_greet.py",
      "16_csv.py",
      "33_guess_the_number.py"
    ],
    "loaded_variable:number": [
      "33_guess_the_number.py"
    ],
    "loaded_variable:numbers": [
      "20_prime_numbers.py"
    ],
    "loaded_variable:object": [
      "12_classes.py"
    ],
    "loaded_variable:p": [
      "20_prime_numbers.py"
    ],
    "loaded_variable:pantry": [
      "21_xml_html_parsing.py"
    ],
    "loaded_variable:parents": [
      "04_fibonacci.py"
    ],
    "loaded_variable:pct": [
      "16_csv.py"
    ],
    "loaded_variable:pool": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "loaded_variable:prices": [
      "07_grocery_bill.py"
    ],
    "loaded_variable:prime": [
      "20_prime_numbers.py"
    ],
    "loaded_variable:python_files": [
      "09_indent.py"
    ],
    "loaded_variable:q": [
      "28_queens.py"
    ],
    "loaded_variable:queens": [
      "18_queens.py",
      "28_queens.py"
    ],
    "loaded_variable:r": [
      "28_queens.py"
    ],
    "loaded_variable:random": [
      "33_guess_the_number.py"
    ],
    "loaded_variable:re": [
      "06_regex.py"
    ],
    "loaded_variable:right": [
      "18_queens.py",
      "28_queens.py"
    ],
    "loaded_variable:self": [
      "12_classes.py",
      "13_unit_testing.py"
    ],
    "loaded_variable:size": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "loaded_variable:smaller_solutions": [
      "18_queens.py"
    ],
    "loaded_variable:solution": [
      "18_queens.py"
    ],
    "loaded_variable:status": [
      "16_csv.py"
    ],
    "loaded_variable:status_labels": [
      "16_csv.py"
    ],
    "loaded_variable:stocks": [
      "16_csv.py"
    ],
    "loaded_variable:stocksFile": [
      "16_csv.py"
    ],
    "loaded_variable:stocksFileW": [
      "16_csv.py"
    ],
    "loaded_variable:sys": [
      "08_arguments.py"
    ],
    "loaded_variable:test_queens": [
      "28_queens.py"
    ],
    "loaded_variable:test_string": [
      "06_regex.py"
    ],
    "loaded_variable:time_now": [
      "10_time.py"
    ],
    "loaded_variable:total": [
      "08_arguments.py"
    ],
    "loaded_variable:tree": [
      "21_xml_html_parsing.py"
    ],
    "loaded_variable:unit": [
      "21_xml_html_parsing.py"
    ],
    "loaded_variable:unittest": [
      "13_unit_testing.py"
    ],
    "loaded_variable:writer": [
      "16_csv.py"
    ],
    "local_scope:a": [
      "16_csv.py"
    ],
    "local_scope:amount": [
      "12_classes.py"
    ],
    "local_scope:arg": [
      "08_arguments.py"
    ],
    "local_scope:b": [
      "16_csv.py"
    ],
    "local_scope:c": [
      "18_queens.py"
    ],
    "local_scope:col": [
      "18_queens.py",
      "28_queens.py"
    ],
    "local_scope:copy": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "local_scope:fruit": [
      "07_grocery_bill.py"
    ],
    "local_scope:i": [
      "18_queens.py",
      "28_queens.py"
    ],
    "local_scope:initial_balance": [
      "12_classes.py"
    ],
    "local_scope:left": [
      "18_queens.py",
      "28_queens.py"
    ],
    "local_scope:n": [
      "18_queens.py"
    ],
    "local_scope:name": [
      "05_greet.py"
    ],
    "local_scope:numbers": [
      "20_prime_numbers.py"
    ],
    "local_scope:pool": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "local_scope:prime": [
      "20_prime_numbers.py"
    ],
    "local_scope:q": [
      "28_queens.py"
    ],
    "local_scope:queens": [
      "18_queens.py",
      "28_queens.py"
    ],
    "local_scope:r": [
      "18_queens.py",
      "28_queens.py"
    ],
    "local_scope:right": [
      "18_queens.py",
      "28_queens.py"
    ],
    "local_scope:self": [
      "12_classes.py",
      "13_unit_testing.py"
    ],
    "local_scope:size": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "local_scope:smaller_solutions": [
      "18_queens.py"
    ],
    "local_scope:solution": [
      "18_queens.py"
    ],
    "local_scope:test_queens": [
      "28_queens.py"
    ],
    "loop:for": [
      "03_friends.py",
      "06_regex.py",
      "09_indent.py",
      "10_time.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py"
    ],
    "loop:while": [
      "04_fibonacci.py",
      "11_bottles.py",
      "20_prime_numbers.py",
      "33_guess_the_number.py"
    ],
    "loop_else": [
      "10_time.py"
    ],
    "loop_with_break:for": [
      "10_time.py",
      "20_prime_numbers.py"
    ],
    "loop_with_break:while": [
      "33_guess_the_number.py"
    ],
    "loop_with_early_exit:for:break": [
      "10_time.py",
      "20_prime_numbers.py"
    ],
    "loop_with_early_exit:for:raise": [
      "28_queens.py"
    ],
    "loop_with_early_exit:for:return": [
      "18_queens.py",
      "28_queens.py"
    ],
    "loop_with_early_exit:while:break": [
      "33_guess_the_number.py"
    ],
    "loop_with_else:for": [
      "10_time.py"
    ],
    "loop_with_late_exit:for": [
      "03_friends.py",
      "06_regex.py",
      "09_indent.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "21_xml_html_parsing.py"
    ],
    "loop_with_late_exit:while": [
      "04_fibonacci.py",
      "11_bottles.py",
      "20_prime_numbers.py"
    ],
    "loop_with_raise:for": [
      "28_queens.py"
    ],
    "loop_with_return:for": [
      "18_queens.py",
      "28_queens.py"
    ],
    "magic_number:-0.13": [
      "16_csv.py"
    ],
    "magic_number:-1.4901": [
      "16_csv.py"
    ],
    "magic_number:0.0": [
      "16_csv.py"
    ],
    "magic_number:0.09": [
      "16_csv.py"
    ],
    "magic_number:0.33": [
      "16_csv.py"
    ],
    "magic_number:0.4": [
      "07_grocery_bill.py"
    ],
    "magic_number:0.47": [
      "16_csv.py"
    ],
    "magic_number:0.5": [
      "07_grocery_bill.py"
    ],
    "magic_number:1.22": [
      "16_csv.py"
    ],
    "magic_number:100": [
      "04_fibonacci.py"
    ],
    "magic_number:1000": [
      "20_prime_numbers.py"
    ],
    "magic_number:15": [
      "12_classes.py"
    ],
    "magic_number:17": [
      "10_time.py"
    ],
    "magic_number:18": [
      "10_time.py"
    ],
    "magic_number:20": [
      "10_time.py",
      "33_guess_the_number.py"
    ],
    "magic_number:22": [
      "10_time.py"
    ],
    "magic_number:27.38": [
      "16_csv.py"
    ],
    "magic_number:4": [
      "13_unit_testing.py"
    ],
    "magic_number:5": [
      "13_unit_testing.py"
    ],
    "magic_number:50": [
      "12_classes.py"
    ],
    "magic_number:505.24": [
      "16_csv.py"
    ],
    "magic_number:6": [
      "07_grocery_bill.py",
      "33_guess_the_number.py"
    ],
    "magic_number:7": [
      "13_unit_testing.py"
    ],
    "magic_number:8": [
      "10_time.py",
      "13_unit_testing.py"
    ],
    "magic_number:8.62": [
      "16_csv.py"
    ],
    "magic_number:9": [
      "10_time.py",
      "11_bottles.py",
      "13_unit_testing.py"
    ],
    "member_call:my_account:withdraw": [
      "12_classes.py"
    ],
    "member_call:self:assertEqual": [
      "13_unit_testing.py"
    ],
    "member_call:writer:writerows": [
      "16_csv.py"
    ],
    "member_call_method:assertEqual": [
      "13_unit_testing.py"
    ],
    "member_call_method:count": [
      "20_prime_numbers.py"
    ],
    "member_call_method:format": [
      "03_friends.py",
      "04_fibonacci.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "33_guess_the_number.py"
    ],
    "member_call_method:fromstring": [
      "21_xml_html_parsing.py"
    ],
    "member_call_method:getiterator": [
      "21_xml_html_parsing.py"
    ],
    "member_call_method:glob": [
      "09_indent.py"
    ],
    "member_call_method:join": [
      "15_itertools_groupby.py",
      "28_queens.py"
    ],
    "member_call_method:keys": [
      "10_time.py"
    ],
    "member_call_method:match": [
      "06_regex.py"
    ],
    "member_call_method:overdrawn": [
      "12_classes.py"
    ],
    "member_call_method:randint": [
      "33_guess_the_number.py"
    ],
    "member_call_method:reader": [
      "16_csv.py"
    ],
    "member_call_method:rstrip": [
      "09_indent.py"
    ],
    "member_call_method:splitlines": [
      "15_itertools_groupby.py"
    ],
    "member_call_method:withdraw": [
      "12_classes.py"
    ],
    "member_call_method:writer": [
      "16_csv.py"
    ],
    "member_call_method:writerows": [
      "16_csv.py"
    ],
    "member_call_object:my_account": [
      "12_classes.py"
    ],
    "member_call_object:self": [
      "13_unit_testing.py"
    ],
    "member_call_object:writer": [
      "16_csv.py"
    ],
    "method:__init__": [
      "12_classes.py"
    ],
    "method:deposit": [
      "12_classes.py"
    ],
    "method:overdrawn": [
      "12_classes.py"
    ],
    "method:testMedian": [
      "13_unit_testing.py"
    ],
    "method:withdraw": [
      "12_classes.py"
    ],
    "modulo_operator": [
      "11_bottles.py",
      "13_unit_testing.py",
      "14_median.py"
    ],
    "multiplication_operator": [
      "07_grocery_bill.py"
    ],
    "negative_index:-1": [
      "28_queens.py"
    ],
    "nested_for:1": [
      "09_indent.py"
    ],
    "no_operation": [
      "28_queens.py"
    ],
    "node:Assign": [
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:Attribute": [
      "03_friends.py",
      "04_fibonacci.py",
      "06_regex.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "12_classes.py",
      "13_unit_testing.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:AugAssign": [
      "11_bottles.py",
      "12_classes.py",
      "33_guess_the_number.py"
    ],
    "node:BinOp": [
      "02_input_name.py",
      "04_fibonacci.py",
      "07_grocery_bill.py",
      "09_indent.py",
      "11_bottles.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "node:BoolOp": [
      "21_xml_html_parsing.py"
    ],
    "node:Break": [
      "10_time.py",
      "20_prime_numbers.py",
      "33_guess_the_number.py"
    ],
    "node:Call": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:ClassDef": [
      "12_classes.py",
      "13_unit_testing.py",
      "28_queens.py"
    ],
    "node:Compare": [
      "04_fibonacci.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:Dict": [
      "07_grocery_bill.py",
      "10_time.py",
      "16_csv.py"
    ],
    "node:ExceptHandler": [
      "08_arguments.py",
      "28_queens.py"
    ],
    "node:Expr": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:For": [
      "03_friends.py",
      "06_regex.py",
      "09_indent.py",
      "10_time.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py"
    ],
    "node:FunctionDef": [
      "05_greet.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "28_queens.py"
    ],
    "node:GeneratorExp": [
      "07_grocery_bill.py",
      "08_arguments.py",
      "28_queens.py"
    ],
    "node:If": [
      "06_regex.py",
      "10_time.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:Import": [
      "06_regex.py",
      "08_arguments.py",
      "09_indent.py",
      "13_unit_testing.py",
      "16_csv.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "33_guess_the_number.py"
    ],
    "node:ImportFrom": [
      "10_time.py",
      "15_itertools_groupby.py"
    ],
    "node:List": [
      "03_friends.py",
      "06_regex.py",
      "13_unit_testing.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "node:ListComp": [
      "18_queens.py"
    ],
    "node:Name": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:NameConstant": [
      "18_queens.py",
      "20_prime_numbers.py"
    ],
    "node:Num": [
      "04_fibonacci.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:Pass": [
      "28_queens.py"
    ],
    "node:Raise": [
      "28_queens.py"
    ],
    "node:Return": [
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "node:Set": [
      "21_xml_html_parsing.py"
    ],
    "node:Str": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "node:Subscript": [
      "07_grocery_bill.py",
      "08_arguments.py",
      "10_time.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "28_queens.py"
    ],
    "node:Try": [
      "08_arguments.py",
      "28_queens.py"
    ],
    "node:Tuple": [
      "03_friends.py",
      "04_fibonacci.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "21_xml_html_parsing.py",
      "28_queens.py"
    ],
    "node:UnaryOp": [
      "18_queens.py"
    ],
    "node:While": [
      "04_fibonacci.py",
      "11_bottles.py",
      "20_prime_numbers.py",
      "33_guess_the_number.py"
    ],
    "node:With": [
      "09_indent.py",
      "16_csv.py"
    ],
    "node:Yield": [
      "20_prime_numbers.py"
    ],
    "node:arg": [
      "05_greet.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "object_oriented_style": [
      "12_classes.py",
      "13_unit_testing.py",
      "28_queens.py"
    ],
    "one_liner_style": [
      "01_hello_world.py"
    ],
    "parallel_assignment:2": [
      "04_fibonacci.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "parallel_assignment:3": [
      "21_xml_html_parsing.py"
    ],
    "procedural_style": [
      "05_greet.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py"
    ],
    "pure_function:cmp": [
      "16_csv.py"
    ],
    "raise:BailOut": [
      "28_queens.py"
    ],
    "range:BOARD_SIZE": [
      "18_queens.py",
      "28_queens.py"
    ],
    "recursive_call_count:1": [
      "18_queens.py",
      "28_queens.py"
    ],
    "recursive_function:add_queen": [
      "28_queens.py"
    ],
    "recursive_function:solve": [
      "18_queens.py"
    ],
    "replication_operator:Str": [
      "28_queens.py"
    ],
    "return": [
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "return:False": [
      "18_queens.py"
    ],
    "return:True": [
      "18_queens.py"
    ],
    "return:test_queens": [
      "28_queens.py"
    ],
    "scope:BOARD_SIZE": [
      "18_queens.py",
      "28_queens.py"
    ],
    "scope:REFRAIN": [
      "11_bottles.py"
    ],
    "scope:a": [
      "16_csv.py"
    ],
    "scope:activities": [
      "10_time.py"
    ],
    "scope:activity_time": [
      "10_time.py"
    ],
    "scope:amount": [
      "12_classes.py"
    ],
    "scope:amt": [
      "21_xml_html_parsing.py"
    ],
    "scope:answer": [
      "18_queens.py"
    ],
    "scope:arg": [
      "08_arguments.py"
    ],
    "scope:b": [
      "16_csv.py"
    ],
    "scope:babies": [
      "04_fibonacci.py"
    ],
    "scope:bottles_of_beer": [
      "11_bottles.py"
    ],
    "scope:c": [
      "18_queens.py"
    ],
    "scope:change": [
      "16_csv.py"
    ],
    "scope:col": [
      "18_queens.py",
      "28_queens.py"
    ],
    "scope:copy": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "scope:dinner_recipe": [
      "21_xml_html_parsing.py"
    ],
    "scope:file_name": [
      "09_indent.py"
    ],
    "scope:frags": [
      "15_itertools_groupby.py"
    ],
    "scope:friends": [
      "03_friends.py"
    ],
    "scope:fruit": [
      "07_grocery_bill.py"
    ],
    "scope:grocery_bill": [
      "07_grocery_bill.py"
    ],
    "scope:guess": [
      "33_guess_the_number.py"
    ],
    "scope:guesses_made": [
      "33_guess_the_number.py"
    ],
    "scope:has_chars": [
      "15_itertools_groupby.py"
    ],
    "scope:hour": [
      "10_time.py"
    ],
    "scope:i": [
      "03_friends.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "scope:ingredient": [
      "21_xml_html_parsing.py"
    ],
    "scope:initial_balance": [
      "12_classes.py"
    ],
    "scope:item": [
      "21_xml_html_parsing.py"
    ],
    "scope:left": [
      "18_queens.py",
      "28_queens.py"
    ],
    "scope:line": [
      "09_indent.py"
    ],
    "scope:lines": [
      "15_itertools_groupby.py"
    ],
    "scope:my_account": [
      "12_classes.py"
    ],
    "scope:my_purchase": [
      "07_grocery_bill.py"
    ],
    "scope:n": [
      "18_queens.py"
    ],
    "scope:name": [
      "02_input_name.py",
      "03_friends.py",
      "05_greet.py",
      "16_csv.py",
      "33_guess_the_number.py"
    ],
    "scope:number": [
      "33_guess_the_number.py"
    ],
    "scope:numbers": [
      "20_prime_numbers.py"
    ],
    "scope:p": [
      "20_prime_numbers.py"
    ],
    "scope:pantry": [
      "21_xml_html_parsing.py"
    ],
    "scope:parents": [
      "04_fibonacci.py"
    ],
    "scope:pct": [
      "16_csv.py"
    ],
    "scope:pool": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "scope:price": [
      "16_csv.py"
    ],
    "scope:prices": [
      "07_grocery_bill.py"
    ],
    "scope:prime": [
      "20_prime_numbers.py"
    ],
    "scope:python_files": [
      "09_indent.py"
    ],
    "scope:q": [
      "28_queens.py"
    ],
    "scope:queens": [
      "18_queens.py",
      "28_queens.py"
    ],
    "scope:r": [
      "18_queens.py",
      "28_queens.py"
    ],
    "scope:right": [
      "18_queens.py",
      "28_queens.py"
    ],
    "scope:self": [
      "12_classes.py",
      "13_unit_testing.py"
    ],
    "scope:size": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "scope:smaller_solutions": [
      "18_queens.py"
    ],
    "scope:solution": [
      "18_queens.py"
    ],
    "scope:status": [
      "16_csv.py"
    ],
    "scope:status_labels": [
      "16_csv.py"
    ],
    "scope:stocks": [
      "16_csv.py"
    ],
    "scope:test_queens": [
      "28_queens.py"
    ],
    "scope:test_string": [
      "06_regex.py"
    ],
    "scope:ticker": [
      "16_csv.py"
    ],
    "scope:time_now": [
      "10_time.py"
    ],
    "scope:total": [
      "08_arguments.py"
    ],
    "scope:tree": [
      "21_xml_html_parsing.py"
    ],
    "scope:unit": [
      "21_xml_html_parsing.py"
    ],
    "scope:writer": [
      "16_csv.py"
    ],
    "shadowing_scope:queens": [
      "28_queens.py"
    ],
    "single_assignment:BOARD_SIZE": [
      "18_queens.py",
      "28_queens.py"
    ],
    "single_assignment:REFRAIN": [
      "11_bottles.py"
    ],
    "single_assignment:activities": [
      "10_time.py"
    ],
    "single_assignment:bottles_of_beer": [
      "11_bottles.py"
    ],
    "single_assignment:copy": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "single_assignment:dinner_recipe": [
      "21_xml_html_parsing.py"
    ],
    "single_assignment:friends": [
      "03_friends.py"
    ],
    "single_assignment:grocery_bill": [
      "07_grocery_bill.py"
    ],
    "single_assignment:guess": [
      "33_guess_the_number.py"
    ],
    "single_assignment:guesses_made": [
      "33_guess_the_number.py"
    ],
    "single_assignment:hour": [
      "10_time.py"
    ],
    "single_assignment:lines": [
      "15_itertools_groupby.py"
    ],
    "single_assignment:my_account": [
      "12_classes.py"
    ],
    "single_assignment:my_purchase": [
      "07_grocery_bill.py"
    ],
    "single_assignment:name": [
      "02_input_name.py",
      "33_guess_the_number.py"
    ],
    "single_assignment:number": [
      "33_guess_the_number.py"
    ],
    "single_assignment:numbers": [
      "20_prime_numbers.py"
    ],
    "single_assignment:pantry": [
      "21_xml_html_parsing.py"
    ],
    "single_assignment:prices": [
      "07_grocery_bill.py"
    ],
    "single_assignment:prime": [
      "20_prime_numbers.py"
    ],
    "single_assignment:python_files": [
      "09_indent.py"
    ],
    "single_assignment:queens": [
      "28_queens.py"
    ],
    "single_assignment:size": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "single_assignment:smaller_solutions": [
      "18_queens.py"
    ],
    "single_assignment:status": [
      "16_csv.py"
    ],
    "single_assignment:status_labels": [
      "16_csv.py"
    ],
    "single_assignment:stocks": [
      "16_csv.py"
    ],
    "single_assignment:test_queens": [
      "28_queens.py"
    ],
    "single_assignment:time_now": [
      "10_time.py"
    ],
    "single_assignment:total": [
      "08_arguments.py"
    ],
    "single_assignment:tree": [
      "21_xml_html_parsing.py"
    ],
    "single_assignment:writer": [
      "16_csv.py"
    ],
    "slice:1::": [
      "08_arguments.py"
    ],
    "slice::-1:": [
      "28_queens.py"
    ],
    "slice_lower:": [
      "28_queens.py"
    ],
    "slice_lower:1": [
      "08_arguments.py"
    ],
    "slice_step:": [
      "08_arguments.py",
      "28_queens.py"
    ],
    "slice_upper:": [
      "08_arguments.py"
    ],
    "slice_upper:-1": [
      "28_queens.py"
    ],
    "slide": [
      "04_fibonacci.py"
    ],
    "special_literal_string:<html><body><table>\\n<tr><th>amt</th><th>unit</th><th>item</th></tr>\\n<tr><td>24</td><td>slices</td><td>baguette</td></tr>\\n<tr><td>2+</td><td>tbsp</td><td>olive oil</td></tr>\\n<tr><td>1</td><td>cup</td><td>tomatoes</td></tr>\\n<tr><td>1</td><td>jar</td><td>pesto</td></tr>\\n</table></body></html>": [
      "21_xml_html_parsing.py"
    ],
    "special_literal_string:Hello! What is your name?\\n": [
      "33_guess_the_number.py"
    ],
    "special_literal_string:What is your name?\\n": [
      "02_input_name.py"
    ],
    "special_literal_string:\\n": [
      "28_queens.py"
    ],
    "special_literal_string:\\n%d bottles of beer on the wall,\\n%d bottles of beer,\\ntake one down, pass it around,\\n%d bottles of beer on the wall!\\n": [
      "11_bottles.py"
    ],
    "special_literal_string:\\nThis is the\\nfirst paragraph.\\nThis is the second.\\n": [
      "15_itertools_groupby.py"
    ],
    "special_literal_string:^\\\\d{3}-\\\\d{4}$": [
      "06_regex.py"
    ],
    "string_formatting_operator": [
      "02_input_name.py",
      "07_grocery_bill.py"
    ],
    "tail_recursive_function:add_queen": [
      "28_queens.py"
    ],
    "try_except:BailOut": [
      "28_queens.py"
    ],
    "try_except:ValueError": [
      "08_arguments.py"
    ],
    "unary_operator:Not": [
      "18_queens.py"
    ],
    "update:babies:parents": [
      "04_fibonacci.py"
    ],
    "update:bottles_of_beer:1": [
      "11_bottles.py"
    ],
    "update:guesses_made:1": [
      "33_guess_the_number.py"
    ],
    "update:left:1": [
      "18_queens.py",
      "28_queens.py"
    ],
    "update:left:right": [
      "18_queens.py",
      "28_queens.py"
    ],
    "update:numbers:prime": [
      "20_prime_numbers.py"
    ],
    "update:parents:babies": [
      "04_fibonacci.py"
    ],
    "update:right:1": [
      "18_queens.py",
      "28_queens.py"
    ],
    "update:right:left": [
      "18_queens.py",
      "28_queens.py"
    ],
    "update:self:amount": [
      "12_classes.py"
    ],
    "update_by_assignment:babies:parents": [
      "04_fibonacci.py"
    ],
    "update_by_assignment:left:1": [
      "18_queens.py",
      "28_queens.py"
    ],
    "update_by_assignment:left:right": [
      "18_queens.py",
      "28_queens.py"
    ],
    "update_by_assignment:numbers:prime": [
      "20_prime_numbers.py"
    ],
    "update_by_assignment:parents:babies": [
      "04_fibonacci.py"
    ],
    "update_by_assignment:right:1": [
      "18_queens.py",
      "28_queens.py"
    ],
    "update_by_assignment:right:left": [
      "18_queens.py",
      "28_queens.py"
    ],
    "update_by_assignment_with": [
      "04_fibonacci.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "update_by_assignment_with:filter": [
      "20_prime_numbers.py"
    ],
    "update_by_augmented_assignment:bottles_of_beer:1": [
      "11_bottles.py"
    ],
    "update_by_augmented_assignment:guesses_made:1": [
      "33_guess_the_number.py"
    ],
    "update_by_augmented_assignment:self:amount": [
      "12_classes.py"
    ],
    "update_by_augmented_assignment_with:Add": [
      "12_classes.py",
      "33_guess_the_number.py"
    ],
    "update_by_augmented_assignment_with:Sub": [
      "11_bottles.py",
      "12_classes.py"
    ],
    "update_with": [
      "04_fibonacci.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "update_with:Add": [
      "12_classes.py",
      "33_guess_the_number.py"
    ],
    "update_with:Sub": [
      "11_bottles.py",
      "12_classes.py"
    ],
    "update_with:filter": [
      "20_prime_numbers.py"
    ],
    "value_attr:argv": [
      "08_arguments.py"
    ],
    "variety:1": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "07_grocery_bill.py"
    ],
    "variety:2": [
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "14_median.py"
    ],
    "variety:3": [
      "08_arguments.py",
      "09_indent.py",
      "11_bottles.py",
      "13_unit_testing.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "21_xml_html_parsing.py"
    ],
    "variety:4": [
      "12_classes.py",
      "33_guess_the_number.py"
    ],
    "variety:5": [
      "10_time.py",
      "18_queens.py"
    ],
    "variety:6": [
      "20_prime_numbers.py"
    ],
    "variety:7": [
      "28_queens.py"
    ],
    "whole_span:1": [
      "01_hello_world.py"
    ],
    "whole_span:10": [
      "11_bottles.py"
    ],
    "whole_span:11": [
      "13_unit_testing.py",
      "20_prime_numbers.py"
    ],
    "whole_span:12": [
      "12_classes.py"
    ],
    "whole_span:14": [
      "21_xml_html_parsing.py"
    ],
    "whole_span:17": [
      "10_time.py"
    ],
    "whole_span:18": [
      "16_csv.py",
      "33_guess_the_number.py"
    ],
    "whole_span:2": [
      "02_input_name.py"
    ],
    "whole_span:20": [
      "18_queens.py"
    ],
    "whole_span:24": [
      "28_queens.py"
    ],
    "whole_span:3": [
      "03_friends.py"
    ],
    "whole_span:4": [
      "04_fibonacci.py",
      "07_grocery_bill.py"
    ],
    "whole_span:5": [
      "05_greet.py"
    ],
    "whole_span:6": [
      "06_regex.py",
      "08_arguments.py"
    ],
    "whole_span:7": [
      "14_median.py"
    ],
    "whole_span:8": [
      "09_indent.py"
    ],
    "whole_span:9": [
      "15_itertools_groupby.py"
    ],
    "yield:prime": [
      "20_prime_numbers.py"
    ]
  },
  "taxa": {
    "call/class/construct": [
      "12_classes.py"
    ],
    "call/composition": [
      "03_friends.py",
      "04_fibonacci.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "12_classes.py",
      "13_unit_testing.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "call/subroutine": [
      "05_greet.py",
      "13_unit_testing.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "call/subroutine/builtin/casting/float": [
      "16_csv.py"
    ],
    "call/subroutine/builtin/casting/int": [
      "08_arguments.py",
      "13_unit_testing.py",
      "14_median.py",
      "33_guess_the_number.py"
    ],
    "call/subroutine/builtin/enumerate": [
      "03_friends.py"
    ],
    "call/subroutine/builtin/filter": [
      "20_prime_numbers.py"
    ],
    "call/subroutine/builtin/input": [
      "02_input_name.py",
      "33_guess_the_number.py"
    ],
    "call/subroutine/builtin/len": [
      "13_unit_testing.py",
      "14_median.py",
      "28_queens.py"
    ],
    "call/subroutine/builtin/next": [
      "20_prime_numbers.py"
    ],
    "call/subroutine/builtin/open": [
      "09_indent.py",
      "16_csv.py"
    ],
    "call/subroutine/builtin/print": [
      "01_hello_world.py",
      "02_input_name.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "call/subroutine/builtin/print/iteration": [
      "03_friends.py"
    ],
    "call/subroutine/builtin/print/name": [
      "03_friends.py"
    ],
    "call/subroutine/builtin/range": [
      "18_queens.py",
      "28_queens.py"
    ],
    "call/subroutine/builtin/reversed": [
      "18_queens.py",
      "28_queens.py"
    ],
    "call/subroutine/builtin/sorted": [
      "09_indent.py",
      "10_time.py",
      "13_unit_testing.py",
      "14_median.py"
    ],
    "call/subroutine/builtin/sum": [
      "07_grocery_bill.py",
      "08_arguments.py"
    ],
    "call/subroutine/method": [
      "06_regex.py",
      "09_indent.py",
      "12_classes.py",
      "13_unit_testing.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "33_guess_the_number.py"
    ],
    "call/subroutine/method/non_sequence/dictionary/keys": [
      "10_time.py"
    ],
    "call/subroutine/method/sequence/string/format": [
      "03_friends.py",
      "04_fibonacci.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "33_guess_the_number.py"
    ],
    "call/subroutine/method/sequence/string/join": [
      "15_itertools_groupby.py",
      "28_queens.py"
    ],
    "call/subroutine/method/sequence/string/rstrip": [
      "09_indent.py"
    ],
    "call/subroutine/method/sequence/string/splitlines": [
      "15_itertools_groupby.py"
    ],
    "call/subroutine/method/sequence_duck/count": [
      "20_prime_numbers.py"
    ],
    "call/subroutine/no_arguments": [
      "09_indent.py",
      "10_time.py",
      "20_prime_numbers.py"
    ],
    "condition/belonging": [
      "18_queens.py",
      "28_queens.py"
    ],
    "condition/belonging/not": [
      "21_xml_html_parsing.py"
    ],
    "condition/divisibility/parity": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "condition/equality": [
      "13_unit_testing.py",
      "14_median.py",
      "18_queens.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "condition/inequality": [
      "04_fibonacci.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "16_csv.py",
      "20_prime_numbers.py",
      "33_guess_the_number.py"
    ],
    "def/class": [
      "12_classes.py",
      "13_unit_testing.py",
      "28_queens.py"
    ],
    "def/subroutine/function": [
      "12_classes.py"
    ],
    "def/subroutine/function/impure": [
      "13_unit_testing.py",
      "14_median.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "def/subroutine/function/pure": [
      "16_csv.py"
    ],
    "def/subroutine/generator": [
      "20_prime_numbers.py"
    ],
    "def/subroutine/generator/expression": [
      "07_grocery_bill.py",
      "08_arguments.py",
      "28_queens.py"
    ],
    "def/subroutine/method/flavor/instance": [
      "12_classes.py",
      "13_unit_testing.py"
    ],
    "def/subroutine/method/naming/magic/__init__": [
      "12_classes.py"
    ],
    "def/subroutine/parameter/arg": [
      "05_greet.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "def/subroutine/parameter/default/Num": [
      "12_classes.py"
    ],
    "def/subroutine/parameter/no": [
      "20_prime_numbers.py"
    ],
    "def/subroutine/procedure": [
      "05_greet.py",
      "12_classes.py",
      "13_unit_testing.py",
      "28_queens.py"
    ],
    "def/subroutine/recursive/body": [
      "18_queens.py"
    ],
    "def/subroutine/recursive/call_count/1": [
      "18_queens.py",
      "28_queens.py"
    ],
    "def/subroutine/recursive/tail": [
      "28_queens.py"
    ],
    "def/subroutine/return/something": [
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "flow/conditional": [
      "06_regex.py",
      "13_unit_testing.py",
      "14_median.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "flow/conditional/else": [
      "06_regex.py",
      "13_unit_testing.py",
      "14_median.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "flow/conditional/guard": [
      "18_queens.py"
    ],
    "flow/conditional/no_else": [
      "10_time.py",
      "15_itertools_groupby.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "flow/exception/catch/": [
      "28_queens.py"
    ],
    "flow/exception/catch/ValueError": [
      "08_arguments.py"
    ],
    "flow/loop/exit/early/break": [
      "20_prime_numbers.py",
      "33_guess_the_number.py"
    ],
    "flow/loop/exit/early/break/else": [
      "10_time.py"
    ],
    "flow/loop/exit/early/raise": [
      "28_queens.py"
    ],
    "flow/loop/exit/early/return": [
      "18_queens.py",
      "28_queens.py"
    ],
    "flow/loop/exit/late": [
      "03_friends.py",
      "04_fibonacci.py",
      "06_regex.py",
      "09_indent.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py"
    ],
    "flow/loop/for": [
      "06_regex.py",
      "09_indent.py",
      "10_time.py",
      "15_itertools_groupby.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py"
    ],
    "flow/loop/for/arithmetic": [
      "28_queens.py"
    ],
    "flow/loop/for/elements": [
      "09_indent.py",
      "16_csv.py"
    ],
    "flow/loop/for/indexes_and_elements": [
      "03_friends.py"
    ],
    "flow/loop/for/nested/1": [
      "09_indent.py"
    ],
    "flow/loop/while": [
      "04_fibonacci.py",
      "11_bottles.py",
      "33_guess_the_number.py"
    ],
    "flow/loop/while/infinite": [
      "20_prime_numbers.py"
    ],
    "flow/no_operation": [
      "28_queens.py"
    ],
    "import/standard/csv": [
      "16_csv.py"
    ],
    "import/standard/glob": [
      "09_indent.py"
    ],
    "import/standard/itertools": [
      "20_prime_numbers.py"
    ],
    "import/standard/itertools/groupby": [
      "15_itertools_groupby.py"
    ],
    "import/standard/random": [
      "33_guess_the_number.py"
    ],
    "import/standard/re": [
      "06_regex.py"
    ],
    "import/standard/sys": [
      "08_arguments.py"
    ],
    "import/standard/time/localtime": [
      "10_time.py"
    ],
    "import/standard/unittest": [
      "13_unit_testing.py"
    ],
    "import/standard/xml.etree.ElementTree": [
      "21_xml_html_parsing.py"
    ],
    "meta/count/class/methods/1": [
      "13_unit_testing.py"
    ],
    "meta/count/class/methods/4": [
      "12_classes.py"
    ],
    "meta/count/program/sloc/1": [
      "01_hello_world.py"
    ],
    "meta/count/program/sloc/10": [
      "11_bottles.py"
    ],
    "meta/count/program/sloc/11": [
      "13_unit_testing.py",
      "20_prime_numbers.py"
    ],
    "meta/count/program/sloc/12": [
      "12_classes.py"
    ],
    "meta/count/program/sloc/14": [
      "21_xml_html_parsing.py"
    ],
    "meta/count/program/sloc/17": [
      "10_time.py"
    ],
    "meta/count/program/sloc/18": [
      "16_csv.py",
      "33_guess_the_number.py"
    ],
    "meta/count/program/sloc/2": [
      "02_input_name.py"
    ],
    "meta/count/program/sloc/20": [
      "18_queens.py"
    ],
    "meta/count/program/sloc/24": [
      "28_queens.py"
    ],
    "meta/count/program/sloc/3": [
      "03_friends.py"
    ],
    "meta/count/program/sloc/4": [
      "04_fibonacci.py",
      "07_grocery_bill.py"
    ],
    "meta/count/program/sloc/5": [
      "05_greet.py"
    ],
    "meta/count/program/sloc/6": [
      "06_regex.py",
      "08_arguments.py"
    ],
    "meta/count/program/sloc/7": [
      "14_median.py"
    ],
    "meta/count/program/sloc/8": [
      "09_indent.py"
    ],
    "meta/count/program/sloc/9": [
      "15_itertools_groupby.py"
    ],
    "meta/count/subroutine/sloc/12": [
      "28_queens.py"
    ],
    "meta/count/subroutine/sloc/2": [
      "05_greet.py",
      "12_classes.py",
      "13_unit_testing.py",
      "16_csv.py"
    ],
    "meta/count/subroutine/sloc/6": [
      "20_prime_numbers.py",
      "28_queens.py"
    ],
    "meta/count/subroutine/sloc/7": [
      "13_unit_testing.py",
      "14_median.py",
      "18_queens.py"
    ],
    "meta/count/subroutine/sloc/9": [
      "18_queens.py"
    ],
    "meta/count/variety/1": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "07_grocery_bill.py"
    ],
    "meta/count/variety/2": [
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "14_median.py"
    ],
    "meta/count/variety/3": [
      "08_arguments.py",
      "09_indent.py",
      "11_bottles.py",
      "13_unit_testing.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "21_xml_html_parsing.py"
    ],
    "meta/count/variety/4": [
      "12_classes.py",
      "33_guess_the_number.py"
    ],
    "meta/count/variety/5": [
      "10_time.py",
      "18_queens.py"
    ],
    "meta/count/variety/6": [
      "20_prime_numbers.py"
    ],
    "meta/count/variety/7": [
      "28_queens.py"
    ],
    "meta/program": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "operator/arithmetic/addition": [
      "04_fibonacci.py",
      "13_unit_testing.py",
      "14_median.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "operator/arithmetic/division": [
      "13_unit_testing.py",
      "14_median.py"
    ],
    "operator/arithmetic/modulo": [
      "11_bottles.py",
      "13_unit_testing.py",
      "14_median.py"
    ],
    "operator/arithmetic/multiplication": [
      "07_grocery_bill.py"
    ],
    "operator/arithmetic/substraction": [
      "11_bottles.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "operator/boolean/and": [
      "21_xml_html_parsing.py"
    ],
    "operator/boolean/not": [
      "18_queens.py"
    ],
    "operator/list/concatenation": [
      "18_queens.py",
      "28_queens.py"
    ],
    "operator/string/concatenation": [
      "09_indent.py",
      "28_queens.py"
    ],
    "operator/string/format": [
      "02_input_name.py",
      "07_grocery_bill.py"
    ],
    "operator/string/replication": [
      "28_queens.py"
    ],
    "pattern/elements/satisfy/some": [
      "18_queens.py"
    ],
    "pattern/states/accumulate/count": [
      "33_guess_the_number.py"
    ],
    "style/functional_trait/filter": [
      "20_prime_numbers.py"
    ],
    "style/functional_trait/pure_function": [
      "16_csv.py"
    ],
    "style/imperative": [
      "03_friends.py",
      "04_fibonacci.py",
      "06_regex.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "21_xml_html_parsing.py",
      "33_guess_the_number.py"
    ],
    "style/imperative/flat": [
      "01_hello_world.py",
      "02_input_name.py",
      "07_grocery_bill.py"
    ],
    "style/object_oriented": [
      "12_classes.py",
      "13_unit_testing.py",
      "28_queens.py"
    ],
    "style/one_liner": [
      "01_hello_world.py"
    ],
    "style/procedural": [
      "05_greet.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py"
    ],
    "subscript/index": [
      "07_grocery_bill.py",
      "10_time.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "28_queens.py"
    ],
    "subscript/index/backwards/last": [
      "28_queens.py"
    ],
    "subscript/slice/start": [
      "08_arguments.py"
    ],
    "subscript/slice/stop": [
      "28_queens.py"
    ],
    "type/boolean/literal/False": [
      "18_queens.py"
    ],
    "type/boolean/literal/True": [
      "18_queens.py",
      "20_prime_numbers.py"
    ],
    "type/non_sequence/dictionary": [
      "10_time.py"
    ],
    "type/non_sequence/dictionary/literal": [
      "07_grocery_bill.py",
      "10_time.py",
      "16_csv.py"
    ],
    "type/non_sequence/set/literal": [
      "21_xml_html_parsing.py"
    ],
    "type/number/floating_point": [
      "16_csv.py"
    ],
    "type/number/floating_point/literal": [
      "07_grocery_bill.py",
      "16_csv.py"
    ],
    "type/number/floating_point/literal/zero": [
      "16_csv.py"
    ],
    "type/number/integer": [
      "08_arguments.py",
      "13_unit_testing.py",
      "14_median.py",
      "33_guess_the_number.py"
    ],
    "type/number/integer/literal": [
      "04_fibonacci.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "type/number/integer/literal/zero": [
      "12_classes.py",
      "16_csv.py",
      "18_queens.py",
      "33_guess_the_number.py"
    ],
    "type/number/magic": [
      "04_fibonacci.py",
      "07_grocery_bill.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "16_csv.py",
      "20_prime_numbers.py",
      "33_guess_the_number.py"
    ],
    "type/sequence": [
      "20_prime_numbers.py"
    ],
    "type/sequence/list/comprehension": [
      "18_queens.py"
    ],
    "type/sequence/list/literal": [
      "03_friends.py",
      "06_regex.py",
      "13_unit_testing.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "type/sequence/list/literal/empty": [
      "18_queens.py",
      "28_queens.py"
    ],
    "type/sequence/string": [
      "03_friends.py",
      "04_fibonacci.py",
      "09_indent.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "type/sequence/string/literal": [
      "01_hello_world.py",
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "05_greet.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "type/sequence/string/literal/empty": [
      "16_csv.py"
    ],
    "type/sequence/string/literal/special/\\d": [
      "06_regex.py"
    ],
    "type/sequence/string/literal/special/\\n": [
      "02_input_name.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "type/sequence/tuple/literal": [
      "03_friends.py",
      "04_fibonacci.py",
      "11_bottles.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "21_xml_html_parsing.py",
      "28_queens.py"
    ],
    "var/assignment/explicit": [
      "12_classes.py"
    ],
    "var/assignment/explicit/augmented/Add": [
      "12_classes.py",
      "33_guess_the_number.py"
    ],
    "var/assignment/explicit/augmented/Sub": [
      "11_bottles.py",
      "12_classes.py"
    ],
    "var/assignment/explicit/chained": [
      "18_queens.py",
      "28_queens.py"
    ],
    "var/assignment/explicit/constant": [
      "11_bottles.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "var/assignment/explicit/parallel": [
      "04_fibonacci.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "var/assignment/explicit/parallel/more_than_two": [
      "21_xml_html_parsing.py"
    ],
    "var/assignment/explicit/parallel/slide": [
      "04_fibonacci.py"
    ],
    "var/assignment/explicit/single": [
      "02_input_name.py",
      "03_friends.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "var/assignment/implicit/iteration_variable": [
      "03_friends.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py"
    ],
    "var/assignment/implicit/parameter": [
      "05_greet.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "28_queens.py"
    ],
    "var/assignment/implicit/parameter/self": [
      "12_classes.py",
      "13_unit_testing.py"
    ],
    "var/scope/global": [
      "02_input_name.py",
      "03_friends.py",
      "04_fibonacci.py",
      "06_regex.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "09_indent.py",
      "10_time.py",
      "11_bottles.py",
      "12_classes.py",
      "15_itertools_groupby.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "21_xml_html_parsing.py",
      "28_queens.py",
      "33_guess_the_number.py"
    ],
    "var/scope/local": [
      "05_greet.py",
      "07_grocery_bill.py",
      "08_arguments.py",
      "12_classes.py",
      "13_unit_testing.py",
      "14_median.py",
      "16_csv.py",
      "18_queens.py",
      "20_prime_numbers.py",
      "28_queens.py"
    ],
    "var/scope/outer/constant": [
      "18_queens.py",
      "28_queens.py"
    ],
    "var/scope/shadowing": [
      "28_queens.py"
    ]
  },
  "importations": {
    "01_hello_world.py": [],
    "02_input_name.py": [],
    "03_friends.py": [],
    "04_fibonacci.py": [],
    "05_greet.py": [],
    "06_regex.py": [],
    "07_grocery_bill.py": [],
    "08_arguments.py": [],
    "09_indent.py": [],
    "10_time.py": [],
    "11_bottles.py": [],
    "12_classes.py": [],
    "13_unit_testing.py": [],
    "14_median.py": [],
    "15_itertools_groupby.py": [],
    "16_csv.py": [],
    "18_queens.py": [],
    "20_prime_numbers.py": [],
    "21_xml_html_parsing.py": [],
    "28_queens.py": [],
    "33_guess_the_number.py": []
  },
  "exportations": {
    "01_hello_world.py": [],
    "02_input_name.py": [],
    "03_friends.py": [],
    "04_fibonacci.py": [],
    "05_greet.py": [],
    "06_regex.py": [],
    "07_grocery_bill.py": [],
    "08_arguments.py": [],
    "09_indent.py": [],
    "10_time.py": [],
    "11_bottles.py": [],
    "12_classes.py": [],
    "13_unit_testing.py": [],
    "14_median.py": [],
    "15_itertools_groupby.py": [],
    "16_csv.py": [],
    "18_queens.py": [],
    "20_prime_numbers.py": [],
    "21_xml_html_parsing.py": [],
    "28_queens.py": [],
    "33_guess_the_number.py": []
  }
}
